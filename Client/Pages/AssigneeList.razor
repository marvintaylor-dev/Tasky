@page "/list"
@page "/list/{Id}"

@using Tasky.Client.Services
@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService

<div class="titleContainer d-flex justify-content-center align-items-center flex-column">
    <h3>Assignee List</h3>

    <select @bind-value="Id" @bind-value:event="onchange">
        <option default value="0">Show All</option>
        @foreach (var member in members)
        {
            <option value="@member.MemberId">@member.Name</option>
        }
    </select>
</div>

@if (Id != null)
{
    <div class="centerTask">
        @foreach (Member member in members)
        {
            if (member.MemberId == Id)
            {
                <h4 class="mt-3">@member.Name</h4>
                @foreach (NoteModel task in tasks)
                {
                    if (task.Assignee == member.MemberId)
                    {
                        <TaskComponent Task="task" RefreshList="RefreshList"></TaskComponent>
                    }
                    else if (task.TaskId == 0 && task.Assignee == member.MemberId)
                    {
                        <TaskComponent Task="task" RefreshList="RefreshList"></TaskComponent>
                    }
                }
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                   Style="margin-top: 1rem;"
                   Variant="Variant.Outlined"
                   Color="Color.Transparent"
                   Size="Size.Small" @onclick="(() => AddNewTask(member.MemberId))" />
            }
        }
    </div>
}

@if (Id == null || Id == 0)
{
    <div class="centerTask">
        @foreach (Member member in members)
        {
            <h4 class="mt-3">@member.Name</h4>
            @foreach (NoteModel task in tasks)
            {
                if (task.Assignee == member.MemberId)
                {
                    <TaskComponent Task="task" RefreshList="RefreshList"></TaskComponent>
                }
                else if (task.TaskId == 0 && task.Assignee == member.MemberId)
                {
                    <TaskComponent Task="task" RefreshList="RefreshList"></TaskComponent>
                }
            }
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                   Style="margin-top: 1rem;"
                   Variant="Variant.Outlined"
                   Color="Color.Transparent"
                   Size="Size.Small" @onclick="(() => AddNewTask(member.MemberId))" />
        }
    </div>
}

 <div class="centerTask mt-5">
        <h3>Unassigned Tasks</h3>
        @foreach (NoteModel task in tasks)
        {
            if (task.Assignee == 0 && task.isSubTask == false)
            {
                <TaskComponent Task="task" RefreshList="RefreshList"></TaskComponent>
            }
            if (task.isSubTask == true && task.Assignee == 0)
            {
                NoteModel isTaskAvailable = tasks.FirstOrDefault(t => t.TaskId == task.LinkTo);
                if (isTaskAvailable == null)
                {
                    <SubTaskComponent SubTask="task" RefreshSubTasks="RefreshSubTasks"></SubTaskComponent>
                }
                else
                {
                    Console.WriteLine(isTaskAvailable);
                }
            }
        }
        <MudFab Color="Color.Info" Style="margin-top: 2rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
    </div>



@code {

    [Parameter]
    public int Id { get; set; }

    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new List<NoteModel>();
    List<Member> members = new List<Member>();
    Member memberId = new Member();

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();
        members = await memberService.GetMembers();

        await base.OnInitializedAsync();
    }


    void AddNewTask(int id)
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        memberId = members.FirstOrDefault(m => m.MemberId == id);
        newTask.Assignee = memberId.MemberId;
        StateHasChanged();
    }

    void AddNewTask()
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        StateHasChanged();
    }

    public async Task RefreshList()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }

    public async void RefreshSubTasks()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        Console.WriteLine("Refresh SubTasks Has Been Called");
    }
}
