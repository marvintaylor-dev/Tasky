@page "/list"
@page "/list/{Id}"
@using Tasky.Shared.DTOs;

@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService
@attribute [Authorize]

@if (message != string.Empty)
{
    <div style="position: sticky; top: 0; z-index: 1; background: pink;">@message <span @onclick="ResetMessage">Close</span></div>
}


<div class="titleContainer d-flex justify-content-center align-items-center flex-column">
    <h3>Assignee List</h3>

    <select @bind-value="Id" @bind-value:event="onchange">
        <option default value="0">Show All</option>
        @foreach (var member in memberService.Members)
        {
            <option value="@member.MemberId">@member.Name</option>

        }
    </select>
</div>

@if (isLoading)
{
    <LoadingIndicatorComponent />
}

@if (Id > 0)
{
    <div class="centerTask">
        @foreach (var member in memberService.Members)
        {
            if (member.MemberId == Id)
            {
                <div class="d-flex align-content-center align-items-center gap-3">
                    <h4 class="mt-3">@member.Name</h4>
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                       Style="margin-top: none;"
                       Variant="Variant.Outlined"
                       Color="Color.Transparent"
                       Size="Size.Small" @onclick="(() => AddNewTask(member.MemberId))" />
                </div>
                @foreach (NoteModel task in tasks)
                {
                    if (task.Assignee == member.MemberId)
                    {
                        <TaskComponent Task="task"
                   RefreshList="RefreshList"
                   CallSubTask="() => AddNewSubTask(member.MemberId,task.TaskId)"
                   SimpleStateChange="RemoveTaskWithoutCallingDB" />

                    }
                    else if (task.TaskId == 0 && task.Assignee == member.MemberId)
                    {
                        <TaskComponent Task="task"
                   RefreshList="RefreshList"
                   CallSubTask="() => AddNewSubTask(member.MemberId,task.TaskId)"
                   SimpleStateChange="RemoveTaskWithoutCallingDB" />
                        
                    }
                }

            }
        }
    </div>
}

@if (Id == 0)
{
    <div class="centerTask">
        @foreach (var member in memberService.Members)
        {
            <div class="d-flex align-content-center align-items-center gap-3">
                <h4 class="mt-3">@member.Name</h4>
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                       Style="margin-top: none;"
                       Variant="Variant.Outlined"
                       Color="Color.Transparent"
                       Size="Size.Small" @onclick="(() => AddNewTask(member.MemberId))" />
            </div>
            @foreach (NoteModel task in tasks)
            {
                if (task.Assignee == member.MemberId)
                {
                    <TaskComponent Task="task"
                   RefreshList="RefreshList"
                   CallSubTask="() => AddNewSubTask(member.MemberId, task.TaskId)"
                   SimpleStateChange="RemoveTaskWithoutCallingDB">
                    </TaskComponent>
                }
                else if (task.TaskId == 0 && task.Assignee == member.MemberId)
                {
                    <TaskComponent Task="task"
                   RefreshList="RefreshList"
                   CallSubTask="() => AddNewSubTask(member.MemberId, task.TaskId)"
                   SimpleStateChange="RemoveTaskWithoutCallingDB">
                    </TaskComponent>
                }
            }

        }
    </div>
}

<div class="centerTask mt-5">
    <h3>Unassigned Tasks</h3>
    @foreach (NoteModel task in tasks)
    {
        if (task.Assignee == 0 && task.isSubTask == false)
        {
            <TaskComponent Task="task"
                   RefreshList="RefreshList"
                   CallSubTask="() => AddNewSubTask(task.TaskId)"
                   SimpleStateChange="RemoveTaskWithoutCallingDB">
            </TaskComponent>
        }
        if (task.isSubTask == true && task.Assignee == 0)
        {
            NoteModel isTaskAvailable = tasks.FirstOrDefault(t => t.TaskId == task.LinkTo);
            if (isTaskAvailable == null)
            {
                <TaskComponent Task="task"
                   RefreshList="RefreshList"
                   CallSubTask="() => AddNewSubTask(task.TaskId)"
                   SimpleStateChange="RemoveTaskWithoutCallingDB">
                </TaskComponent>
            }
            else
            {
                Console.WriteLine(isTaskAvailable);
            }
        }
    }
    <MudFab Color="Color.Info" Style="margin-top: 2rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
</div>



@code {
    private bool isLoading = true;

    [Parameter]
    public int Id { get; set; }

    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new();
    List<NoteModel> subtasks = new();
    MemberDTO member = new MemberDTO();
    public string message = string.Empty;

    void ResetMessage()
    {
        message = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasksInOrder();
        subtasks = tasks.FindAll(x => x.isSubTask == true);
        await memberService.GetMembers();
        isLoading = false;
        await base.OnInitializedAsync();
    }

    void AddNewTask()
    {
        var taskWithIdOfZero = tasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            tasks.Add(newTask);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }
    }

    void AddNewTask(int id)
    {
        var taskWithIdOfZero = tasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            member = memberService.Members.FirstOrDefault(m => m.MemberId == id);
            newTask.Assignee = member.MemberId;
            tasks.Add(newTask);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }
    }

    void AddNewSubTask(int id, int taskId)
    {
        var taskWithIdOfZero = tasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            member = memberService.Members.FirstOrDefault(m => m.MemberId == id);
            newTask.Assignee = member.MemberId;
            newTask.isSubTask = true;
            newTask.LinkTo = taskId;
            tasks.Add(newTask);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }
    }

    void AddNewSubTask(int taskId)
    {
        var taskWithIdOfZero = tasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            newTask.isSubTask = true;
            newTask.LinkTo = taskId;
            tasks.Add(newTask);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }

    }


    public async Task RefreshList()
    {
        isLoading = true;
        tasks = await taskService.GetTasksInOrder();
        isLoading = false;
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }

    public async void RefreshSubTasks()
    {
        isLoading = true;
        tasks = await taskService.GetTasksInOrder();
        isLoading = false;
        StateHasChanged();
        Console.WriteLine("Refresh SubTasks Has Been Called");
    }

    void RemoveTaskWithoutCallingDB()
    {
        tasks = tasks.FindAll(x => x.TaskId != 0);
        subtasks = subtasks.FindAll(x => x.TaskId != 0);
    }
}
