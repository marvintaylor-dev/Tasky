@page "/board"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject ITaskService taskService;
@attribute [Authorize]
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations


<AuthorizeView>
    <Authorized>
        <div>You're authorized as @context.User.Identity.Name</div>
    </Authorized>
    <NotAuthorized>
        <div>Do you see this?</div>
    </NotAuthorized>
</AuthorizeView>

<div class="titleContainer d-flex justify-content-center align-items-center">
    <h3>Board View</h3>
</div>

<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => @item.Status.ToString() == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row centerTask">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" MinWidth="224px" MaxWidth="500px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@SplitCamelCase(@item.Name.ToString())</b></MudText>
                    <MudSpacer />
                </MudToolBar>
                <MudDropZone T="KanbanTaskItem" Identifier="@item.Name.ToString()" Class="mud-height-full" />
                @*@if (item.NewTaskOpen)
            {
            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
            <MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
            <MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
            </MudPaper>
            }
            else
            {
            <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
            }*@
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        @* @if (context.isSubTask)
        {
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3 subTaskBorder">
        <div>Start Date: @context.StartDate.ToShortDateString()</div>
        <div>Due Date: @context.DueDate.ToShortDateString()</div>
        <br />
        <div>Task Name: @context.Name</div>

        </MudPaper>
        }*@

        @if (context.isSubTask == false)
        {
            <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3 taskBorder">

                <div>Start Date: @context.StartDate.ToShortDateString()</div>
                <div>Due Date: @context.DueDate.ToShortDateString()</div>
                <MudDivider></MudDivider>
                <br />
                <div>Task Name: @context.Name</div>
                @if (CountSubtasks(context.ItemId) > 0)
                {
                    <div class="mt-3 d-flex justify-content-end">
                        <span class="subTaskCounter">
                            @CountSubtasks(context.ItemId)
                        </span>
                    </div>
                }
            </MudPaper>
        }

    </ItemRenderer>
</MudDropContainer>

@code {
    private bool _addSectionOpen;

    private MudDropContainer<KanbanTaskItem> _dropContainer;

    public bool NewTaskOpen;

    public List<NoteModel> subtasks = new List<NoteModel>();

    public int CountSubtasks(int contextId)
    {
        int count = 0;

        @foreach (var subtask in subtasks)
        {
            @if (subtask.LinkTo == contextId)
            {
                count++;
            }
        }
        return count;
    }


    /* handling board events */
    private async void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
    {
        var statusForDropZoneToRead = info.Item.Status.ToString();
        statusForDropZoneToRead = info.DropzoneIdentifier;

        NoteModel taskToUpdate = tasks.FirstOrDefault(x => x.TaskId == info.Item.ItemId);
        if (taskToUpdate == null)
        {
            Console.WriteLine("No Task to Update");
        }
        else
        {
            foreach (Status status in Enum.GetValues(typeof(Status)))
            {
                if (statusForDropZoneToRead == status.ToString())
                {
                    taskToUpdate.status = status;
                    taskService.UpdateTask(taskToUpdate);
                    info.Item.Status = status;
                }
            }
        }

    }

    public List<NoteModel> tasks = new List<NoteModel>();
    public List<Member> members = new List<Member>();

    /* Setup for board  */
    private List<KanBanSections> _sections = new List<KanBanSections>();

    private List<KanbanTaskItem> _tasks = new List<KanbanTaskItem>();


    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();

        foreach (Status status in Enum.GetValues(typeof(Status)))
        {
            _sections.Add(new KanBanSections(status, false, String.Empty));
        }

        foreach (var task in tasks)
        {
            _tasks.Add(new KanbanTaskItem(task.TaskId, task.Name, task.status, (bool)task.isSubTask, task.Assignee, task.DueDate, task.StartDate, task.LinkTo));
            if (task.isSubTask == true)
            {
                subtasks.Add(task);
            }
        }

        await base.OnInitializedAsync();
    }


    public static string SplitCamelCase(string input)
    {
        return System.Text.RegularExpressions.Regex.Replace(input, "([A-Z])", " $1", System.Text.RegularExpressions.RegexOptions.Compiled).Trim();
    }

    public class KanBanSections
    {
        public Status Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }

        public KanBanSections(Status name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }


    public class KanbanTaskItem
    {
        public int ItemId { get; set; }
        public string Name { get; init; }
        public Status Status { get; set; }
        public bool isSubTask { get; set; }
        public int Assignee { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime StartDate { get; set; }
        public int? LinkTo { get; set; }

        public KanbanTaskItem(int id, string name, Status status, bool isSub, int assignee, DateTime dueDate, DateTime startDate, int? linkTo)
        {
            ItemId = id;
            Name = name;
            Status = status;
            isSubTask = isSub;
            Assignee = assignee;
            DueDate = dueDate;
            StartDate = startDate;
            LinkTo = linkTo;
        }
    }


    KanBanNewForm newSectionModel = new KanBanNewForm();

    public class KanBanNewForm
    {
        [Required]
        [StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
        public string Name { get; set; }
    }

    //private void OnValidSectionSubmit(EditContext context)
    //{
    //    foreach (Status status in Enum.GetValues(typeof(Status)))
    //    {
    //        if (newSectionModel.Name == status.ToString())
    //        {
    //            _sections.Add(new KanBanSections(status, false, String.Empty));
    //        }
    //    }
    //    newSectionModel.Name = string.Empty;
    //    _addSectionOpen = false;
    //}

    //private void AddTask(KanBanSections section)
    //{
    //    _tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
    //    section.NewTaskName = string.Empty;
    //    section.NewTaskOpen = false;
    //    _dropContainer.Refresh();
    //}
}
