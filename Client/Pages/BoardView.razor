@page "/board"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject ITaskService taskService;
@inject IEditSaveService EditSaveService;
@attribute [Authorize]
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Rendering;


<div class="titleContainer d-flex flex-column justify-content-center align-items-center">
    <h3>Board View</h3>
    <div class="d-flex gap-3">
        <div>@OverallWip</div>
        <div class="d-flex flex-column">
            <button style="border: 2px solid black; width: 2rem;" @onclick="() => Increment(null)">+</button>
            <button style="border: 2px solid black; width: 2rem;" @onclick="() => Decrement(null)">-</button>
        </div>
    </div>
</div>


<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status.ToString() == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg kanbanSections">
                <MudToolBar Class="d-flex justify-content-between align-items-center" DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@SplitCamelCase(item.Name.ToString())</b></MudText>
                    @if (item.Name.ToString() == "ToDo")
                    {
                        <div class="d-flex align-items-center gap-3 ms-5">
                            <span>WIP Limit: @WipLimitToDo</span>
                            <div class="d-flex flex-column">
                                <button style="border: 2px solid black; width: 2rem;" @onclick="() => Increment(item.Name.ToString())">+</button>
                                <button style="border: 2px solid black; width: 2rem;" @onclick="() => Decrement(item.Name.ToString())">-</button>
                            </div>
                        </div>
                    }
                    else if (item.Name.ToString() == "InProgress")
                    {
                        <div class="d-flex align-items-center gap-3 ms-5">
                            <span>WIP Limit: @WipLimitInProgress</span>
                            <div class="d-flex flex-column">
                                <button style="border: 2px solid black; width: 2rem;" @onclick="() => Increment(item.Name.ToString())">+</button>
                                <button style="border: 2px solid black; width: 2rem;" @onclick="() => Decrement(item.Name.ToString())">-</button>
                            </div>
                        </div>
                    }
                    else if (item.Name.ToString() == "InReview")
                    {
                        <div class="d-flex align-items-center gap-3 ms-5">
                            <span>WIP Limit: @WipLimitInReview</span>
                            <div class="d-flex flex-column">
                                <button style="border: 2px solid black; width: 2rem;" @onclick="() => Increment(item.Name.ToString())">+</button>
                                <button style="border: 2px solid black; width: 2rem;" @onclick="() => Decrement(item.Name.ToString())">-</button>
                            </div>
                        </div>
                    }


                    <MudSpacer />
                </MudToolBar>
                <MudDropZone T="KanbanTaskItem" Identifier="@item.Name.ToString()" Class="mud-height-full" />
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        @if (context.isSubTask == false)
        {
            <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3 taskBorder">
                <div class="d-flex justify-content-between">
                    @foreach (var task in tasks)
                    {
                        if (task.TaskId == context.ItemId)
                        {
                            <div>
                                <div><b>Start Date:</b> @task.StartDate.ToShortDateString()</div>
                                <div><b>Due Date:</b> @task.DueDate.ToShortDateString()</div>
                            </div>

                            <DateComponent Task="task" RefreshList="RefreshInfo" />
                        }
                    }
                </div>
                <br />
                <div><b>Task:</b> @context.Name</div>
                @foreach (var task in tasks)
                {
                    if (task.TaskId == context.ItemId)
                    {
                        <div class="mt-3 d-flex justify-content-between align-items-center">
                            <div class="itemAge">
                                <span>@taskService.WorkInProgress(task)</span>
                            </div>
                            <ShowSubTasksComponent TaskId="context.ItemId" />
                        </div>
                    }
                }
            </MudPaper>
        }
    </ItemRenderer>
</MudDropContainer>


@code {
    private MudDropContainer<KanbanTaskItem> _dropContainer;

    public List<NoteModel> tasks = new List<NoteModel>();

    async void RefreshInfo()
    {
        _dropContainer.Refresh();
    }

    int OverallWip = 0;
    int WipLimitToDo = 0;
    int WipLimitInProgress = 0;
    int WipLimitInReview = 0;

    void Increment(string? name)
    {
        Console.WriteLine(name);
        if (name == "ToDo")
        {
            WipLimitToDo++;
        }
        else if (name == "InProgress")
        {
            WipLimitInProgress++;
        }
        else if (name == "InReview")
        {
            WipLimitInReview++;
        }
        else
        {
            OverallWip++;
        }

    }

    void Decrement(string? name)
    {
        
        if (name == "ToDo")
        {
            WipLimitToDo--;
        }
        else if (name == "InProgress")
        {
            WipLimitInProgress--;
        }
        else if (name == "InReview")
        {
            WipLimitInReview--;
        }
        else
        {
            OverallWip--;
        }
    }


    /* Setup for board  */
    private List<KanBanSections> _sections = new List<KanBanSections>();

    private List<KanbanTaskItem> _tasks = new List<KanbanTaskItem>();

    private bool _addSectionOpen;


    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
    {
        var statusForDropZoneToRead = info.Item.Status.ToString();
        statusForDropZoneToRead = info.DropzoneIdentifier;

        NoteModel taskToUpdate = tasks.FirstOrDefault(x => x.TaskId == info.Item.ItemId);
        if (taskToUpdate == null)
        {
            Console.WriteLine("No Task to Update");
        }
        else
        {
            foreach (Status status in Enum.GetValues(typeof(Status)))
            {
                if (statusForDropZoneToRead == status.ToString())
                {
                    taskToUpdate.status = status;
                    taskService.UpdateTask(taskToUpdate);
                    info.Item.Status = status;
                }
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();

        foreach (Status status in Enum.GetValues(typeof(Status)))
        {
            _sections.Add(new KanBanSections(status, false, String.Empty));
        }

        foreach (var task in tasks)
        {
            _tasks.Add(new KanbanTaskItem(task.TaskId, task.Name, task.status, (bool)task.isSubTask, task.Assignee, task.DueDate, task.StartDate));
        }


        await base.OnInitializedAsync();
    }






    public static string SplitCamelCase(string input)
    {
        return System.Text.RegularExpressions.Regex.Replace(input, "([A-Z])", " $1", System.Text.RegularExpressions.RegexOptions.Compiled).Trim();
    }

    public class KanBanSections
    {
        public Status Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }

        public KanBanSections(Status name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }


    public class KanbanTaskItem
    {
        public int ItemId { get; set; }
        public string Name { get; init; }
        public Status Status { get; set; }
        public bool isSubTask { get; set; }
        public int Assignee { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime StartDate { get; set; }

        public KanbanTaskItem(int id, string name, Status status, bool isSub, int assignee, DateTime dueDate, DateTime startDate)
        {
            ItemId = id;
            Name = name;
            Status = status;
            isSubTask = isSub;
            Assignee = assignee;
            DueDate = dueDate;
            StartDate = startDate;
        }
    }


}
