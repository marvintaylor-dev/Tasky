@page "/board"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject ITaskService taskService;
@inject IEditSaveService EditSaveService;
@inject IStatusService statusService;
@attribute [Authorize]
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Rendering;
@using Tasky.Shared.DTOs;


<div class="titleContainer d-flex flex-column justify-content-center align-items-center">
    <h3>Board View</h3>
    @*People will want an overall WIP limit here*@
</div>


<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.StatusName == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column rounded-lg mud-background-gray kanbanSections">
                <MudToolBar Class="d-flex justify-content-between align-items-center" DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                    @foreach (var status in statuses)
                    {
                        if (status.StatusName == item.Name)
                        {
                            @if (status.WorkInProgressLimit > 0)
                            {
                                <div class="d-flex flex-column align-items-center ms-3">

                                    <div class="d-flex align-items-center">
                                        <span>
                                            <div class="d-flex flex-column">
                                                <button class="wipButton increaseButton" @onclick="()=>IncreaseWip(status.WorkInProgressLimit, status)">+</button>
                                                <button class="wipButton decreaseButton" @onclick="()=>DecreaseWip(status.WorkInProgressLimit, status)">-</button>
                                            </div>
                                        </span>
                                        <span class="wipLimitNumber">@status.WorkInProgressLimit</span>
                                        <span>
                                            @if (WipActiveShowSaveButton)
                                            {
                                                <MudButton Color="Color.Success" @onclick="()=>UpdateWip(status)">Save</MudButton>

                                            }
                                        </span>
                                    </div>

                                </div>
                            }
                        }
                    }
                </MudToolBar>
                <MudDropZone T="KanbanTaskItem" Identifier="@item.Name" Class="mud-height-full" />
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>

        @if (context.isSubTask == false)
        {
            <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3 taskBorder">
                <div class="d-flex justify-content-between">
                    @foreach (var task in tasks)
                    {
                        if (task.TaskId == context.ItemId)
                        {
                            <div>
                                <div><b>Start Date:</b> @task.StartDate.ToShortDateString()</div>
                                <div><b>Due Date:</b> @task.DueDate.ToShortDateString()</div>
                            </div>

                            <DateComponent Task="task" RefreshList="RefreshInfo" />
                        }
                    }
                </div>
                <br />
                <div><b>Task:</b> @context.Name</div>
                @foreach (var task in tasks)
                {
                    if (task.TaskId == context.ItemId)
                    {
                        <div class="mt-3 d-flex justify-content-between align-items-center">
                            <div class="itemAge">
                                <span>@taskService.WorkInProgress(task)</span>
                            </div>
                            <ShowSubTasksComponent TaskId="context.ItemId" />
                        </div>
                    }
                }
            </MudPaper>
        }
    </ItemRenderer>
</MudDropContainer>


@code {
    private MudDropContainer<KanbanTaskItem> _dropContainer;

    public List<NoteModel> tasks = new List<NoteModel>();
    public List<StatusDTO> statuses = new List<StatusDTO>();

    private bool WipActiveShowSaveButton = false;

    private string WipLimitExceeded = string.Empty;


    async void RefreshInfo()
    {
        _dropContainer.Refresh();
    }

    /* Setup for board  */
    private List<KanBanSections> _sections = new List<KanBanSections>();

    private List<KanbanTaskItem> _tasks = new List<KanbanTaskItem>();
    private bool _addSectionOpen;

    //Provides a name to the columns since the status is an Id.
    public async Task<string> GetName(int? id)
    {
        var name = await statusService.GetStatusById((int)id);
        return name.StatusName;
    }
    public string ShowName(int? id)
    {
        var itemName = GetName(id).ToString();
        return itemName;
    }


    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
    {
        var statusForDropZoneToRead = info.Item.StatusName;
        statusForDropZoneToRead = info.DropzoneIdentifier;

        NoteModel taskToUpdate = tasks.FirstOrDefault(x => x.TaskId == info.Item.ItemId);
        if (taskToUpdate == null)
        {
            Console.WriteLine("No Task to Update");
        }
        else
        {
            foreach (var status in statuses)
            {
                if (statusForDropZoneToRead == status.StatusName)
                {
                    taskToUpdate.Status = status.StatusId;
                    taskService.UpdateTask(taskToUpdate);
                    info.Item.StatusName = status.StatusName;
                }
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasksInOrder();
        statuses = await statusService.GetAllStatuses();

        foreach (var status in statuses)
        {
            _sections.Add(new KanBanSections(status.StatusName, false, String.Empty));
        }

        foreach (var task in tasks)
        {
            var statusName = await statusService.GetStatusById((int)task.Status);
            _tasks.Add(new KanbanTaskItem(task.TaskId, task.Name, statusName.StatusName, task.isSubTask, task.Assignee, task.DueDate, task.StartDate));
        }

        await base.OnInitializedAsync();
    }


    public class KanBanSections
    {
        public string Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }


        public KanBanSections(string name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }


    public class KanbanTaskItem
    {
        public int ItemId { get; set; }
        public string Name { get; init; }
        public string? StatusName { get; set; }
        public bool? isSubTask { get; set; }
        public int Assignee { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime StartDate { get; set; }

        public KanbanTaskItem(int id, string name, string? statusName, bool? isSub, int assignee, DateTime dueDate, DateTime startDate)
        {
            ItemId = id;
            Name = name;
            StatusName = statusName;
            isSubTask = isSub;
            Assignee = assignee;
            DueDate = dueDate;
            StartDate = startDate;
        }
    }


    private async void IncreaseWip(int currentWip, StatusDTO status)
    {
        currentWip++;
        WipActiveShowSaveButton = true;
        status.WorkInProgressLimit = currentWip;
        //await statusService.UpdateStatus(status);
    }

    private async void DecreaseWip(int currentWip, StatusDTO status)
    {
        if (currentWip == 0)
        {
            currentWip = 0;
        }
        else
        {
            currentWip--;
            WipActiveShowSaveButton = true;
            status.WorkInProgressLimit = currentWip;
            //await statusService.UpdateStatus(status);
        }
    }

    private async void UpdateWip(StatusDTO updateStatus)
    {
        WipActiveShowSaveButton = false;
        await statusService.UpdateStatus(updateStatus);
    }

}
