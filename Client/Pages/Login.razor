@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService authService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3 col-3">
        <label for="email">Email</label>
        <input type="text" id="email" @bind-value="user.Email" @bind-value:event="oninput" class="form-control " />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3 col-3">
        <label for="password">Password</label>
        <input type="password" id="password" @bind-value="user.Password" @bind-value:event="oninput" class="form-control" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>


@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    public async Task HandleLogin()
    {
        var result = await authService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await localStorage.SetItemAsync("authToken", result.Data);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
