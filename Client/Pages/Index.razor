@page "/"
@using Tasky.Client.Services
@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService


<h1 class="title">Welcome to Tasky!</h1>

<p>Keep Track of your important day to day items here.</p>

@if (tasks.Count == 0)
{
    <h2>Click the "+" to add your first task!</h2>
}
else
{
    foreach (var task in tasks)
    {
        <TaskComponent Task="task" RefreshList="RefreshList"></TaskComponent>
    }
}

<button class="addTaskBtn" @onclick="AddNewTask">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</button>


@code {

    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new List<NoteModel>();
    List<Member> members = new List<Member>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();
        members = await memberService.GetMembers();

        await base.OnInitializedAsync();
    }

    void AddNewTask()
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        StateHasChanged();
    }

    public async Task RefreshList()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }
}