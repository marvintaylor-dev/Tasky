@page "/"
@using Tasky.Shared.DTOs;
@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService
@inject ISectionService sectionService
@inject IStatusService statusService
@attribute [Authorize]

@if (message != string.Empty)
{
    <div style="position: sticky; top: 0; z-index: 1; background: pink;">@message <span @onclick="ResetMessage">Close</span></div>
}

<div class="titleContainer d-flex justify-content-center align-items-center">
    <h1 class="title">Welcome to <span class="titleName">T</span><MudIcon Color="Color.Secondary" Style="font-size: 2rem;" Icon="@Icons.Outlined.AlternateEmail" /><span class="titleName">sky</span></h1>
</div>



<div class="d-flex justify-content-between mb-3">
    @*
    Removed Sections code for the time being. It doesn't work how it's supposed to anyway.
    @foreach (Section sec in sections)
    {
    <SectionComponent sectionId="sec.SectionId" RefreshList="RefreshList" />
    }
    *@
    <MudButton Color="Color.Secondary" @onclick="AutoOrder">Auto Order</MudButton>
    @if (ShowOrHideAcceptanceCriteria == false)
    {
        <div @onclick="ToggleAcceptanceCriteriaVisibility" class="btn btn-outline-dark">
            Show Acceptance Criteria
        </div>
    }
    else
    {
        <div @onclick="ToggleAcceptanceCriteriaVisibility" class="btn btn-dark">
            Hide Acceptance Criteria
        </div>
    }

    <CompletedTasksComponent @ref="CompletedTasksComponent" Tasks="tasks" Subtasks="subtasks" LastStatus="lastStatus" ListUpdated="RefreshList" />

</div>

@if (isLoading)
{
    <LoadingIndicatorComponent />
}

@if (isLoading == false && tasks.Count == 0)
{
    <div style="font-size: 1rem; font-weight: bold;">Click the button to add your first task!</div>
}

<div class="d-flex flex-column" style="min-width: fit-content; max-width: 70%; margin: auto;">
    <Virtualize Items="@tasks" Context="task">
        @if (task.isSubTask == false)
        {
            if (task.Status != lastStatus)
            {
                <TaskComponent @key="task.TaskId"
                       ShowOrHideCriteria="@ShowOrHideAcceptanceCriteria"
                       Task="task"
                       RefreshList="RefreshList"
                       CallSubTask="() => AddNewSubTask(task.TaskId)"
                       SimpleStateChange="RemoveTaskWithoutCallingDB" />
                @foreach (var t in subtasks)
                {
                    if (t.LinkTo == task.TaskId)
                    {
                        <TaskComponent ShowOrHideCriteria="@ShowOrHideAcceptanceCriteria"
                       Task="t"
                       RefreshList="RefreshList"
                       CallSubTask="() => AddNewSubTask(task.TaskId)"
                       SimpleStateChange="RemoveTaskWithoutCallingDB" />
                    }
                }
            }
        }
    </Virtualize>
</div>


<div class="centerTask">
    <MudFab Color="Color.Info" Style="margin-top: 2rem; margin-left: 10rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
</div>


@code {
    private bool isLoading = true;
    public bool ShowOrHideAcceptanceCriteria = false;
    private string message = string.Empty;

    async Task AutoOrder()
    {
        int order = 1;
        foreach (var task in tasks)
        {
            if (task.isSubTask == false)
            {
                if (task.Status != lastStatus)
                {
                    task.Order = order;
                    await taskService.UpdateTask(task);
                    order++;
                }
            }

        }
        StateHasChanged();
        order = 1;
    }

    void ToggleAcceptanceCriteriaVisibility()
    {
        ShowOrHideAcceptanceCriteria = !ShowOrHideAcceptanceCriteria;
        StateHasChanged();
    }

    void ResetMessage()
    {
        message = string.Empty;
    }

    protected CompletedTasksComponent CompletedTasksComponent;

    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new List<NoteModel>();
    List<NoteModel> subtasks = new List<NoteModel>();
    List<TaskComponent> taskComponents = new();
    //List<Section> sections = new();
    int lastStatus;

    sectionNoteModel link = new sectionNoteModel();


    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasksInOrder();
        subtasks = await taskService.GetSubtasks();
        await memberService.GetMembers();
        StatusDTO lastStatusDTO = await statusService.GetLastStatus();
        lastStatus = lastStatusDTO.StatusId;
        isLoading = false;
        await base.OnInitializedAsync();
    }

    void AddNewTask()
    {
        var taskWithIdOfZero = tasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            tasks.Add(newTask);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }
    }

    void AddNewSubTask(int taskId)
    {
        var taskWithIdOfZero = tasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            newTask.isSubTask = true;
            newTask.LinkTo = taskId;
            subtasks.Add(newTask);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }

    }

    public async Task RefreshList()
    {
        isLoading = true;
        tasks = await taskService.GetTasksInOrder();
        subtasks = await taskService.GetSubtasks();
        //sections = await sectionService.GetSections();
        isLoading = false;
        CompletedTasksComponent.ChangeState();
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }

    void RemoveTaskWithoutCallingDB()
    {
        tasks = tasks.FindAll(x => x.TaskId != 0);
        subtasks = subtasks.FindAll(x => x.TaskId != 0);
    }
}