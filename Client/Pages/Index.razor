@page "/"
@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService
@inject ISectionService sectionService
@inject IStatusService statusService
@attribute [Authorize]

<div class="titleContainer d-flex justify-content-center align-items-center">
    <h1 class="title">Welcome to <span class="titleName">T</span><MudIcon Color="Color.Secondary" Style="font-size: 2rem;" Icon="@Icons.Outlined.AlternateEmail" /><span class="titleName">sky</span></h1>

</div>


<div class="d-flex justify-content-end mb-3">

    @*
    Removed Sections code for the time being. It doesn't work how it's supposed to anyway.
    @foreach (Section sec in sections)
    {
    <SectionComponent sectionId="sec.SectionId" RefreshList="RefreshList" />
    }
    *@
    @if (ShowOrHideAcceptanceCriteria == false)
    {
        <div @onclick="ToggleAcceptanceCriteriaVisibility" class="btn btn-outline-dark">
            Show Acceptance Criteria
        </div>
    }
    else
    {
        <div @onclick="ToggleAcceptanceCriteriaVisibility" class="btn btn-dark">
            Hide Acceptance Criteria
        </div>
    }
</div>


@if (isLoading)
{
    <LoadingIndicatorComponent />
}

@if(isLoading == false && tasks.Count == 0)
{
    <div style="font-size: 1rem; font-weight: bold;">Click the button to add your first task!</div>
}

<Virtualize Items="@tasks" Context="task">
    @if (task.isSubTask == false)
    {
        <TaskComponent @key="task.TaskId" ShowOrHideCriteria="@ShowOrHideAcceptanceCriteria" Task="task" RefreshList="RefreshList" CallSubTask="() => AddNewSubTask(task.TaskId)" />
        @foreach (var t in subtasks)
        {
            if (t.LinkTo == task.TaskId)
            {
                <TaskComponent ShowOrHideCriteria="@ShowOrHideAcceptanceCriteria" Task="t" RefreshList="RefreshList" CallSubTask="() => AddNewSubTask(task.TaskId)" />
            }
        }
    }
</Virtualize>


<div class="centerTask">
    <MudFab Color="Color.Info" Style="margin-top: 2rem; margin-left: 10rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
</div>


@code {
    private bool isLoading = true;
    public bool ShowOrHideAcceptanceCriteria = false;

    void ToggleAcceptanceCriteriaVisibility()
    {
        ShowOrHideAcceptanceCriteria = !ShowOrHideAcceptanceCriteria;
        StateHasChanged();
    }

    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new List<NoteModel>();
    List<NoteModel> subtasks = new List<NoteModel>();
    List<TaskComponent> taskComponents = new();
    //List<Section> sections = new();

    sectionNoteModel link = new sectionNoteModel();


    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasksInOrder();
        subtasks = await taskService.GetSubtasks();
        await memberService.GetMembers();
        isLoading = false;
        await base.OnInitializedAsync();
    }

    void AddNewTask()
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        newTask.isSubTask = false;
        StateHasChanged();
    }

    void AddNewSubTask(int taskId)
    {
        subtasks.Add(newTask);
        newTask.Name = String.Empty;
        newTask.isSubTask = true;
        newTask.LinkTo = taskId;
        StateHasChanged();
    }

    public async Task RefreshList()
    {
        isLoading = true;
        tasks = await taskService.GetTasksInOrder();
        subtasks = await taskService.GetSubtasks();
        //sections = await sectionService.GetSections();
        isLoading = false;
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }
}