@page "/"
@using Tasky.Client.Services
@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService


<div class="titleContainer d-flex justify-content-center align-items-center">
    <h1 class="title">Welcome to <span class="titleName">T</span><MudIcon Color="Color.Secondary" Style="font-size: 2rem;" Icon="@Icons.Outlined.AlternateEmail" /><span class="titleName">sky</span></h1>
</div>

<p></p>
@if (tasks.Count == 0)
{
    <h2>Click the "+" to add your first task!</h2>

    <MudFab Color="Color.Info" Style="margin-top: 2rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
}
else
{
    foreach (var task in tasks)
    {
        if (task.isSubTask == false)
        {
            <div class="centerTask">
            <TaskComponent Task="task" RefreshList="RefreshList" CallSubTask="AddNewSubTask"></TaskComponent>
            </div>
        }
        if (task.isSubTask == true && task.Assignee == 0)
        {
            NoteModel isTaskAvailable = tasks.FirstOrDefault(t => t.TaskId == task.LinkTo);
            if (isTaskAvailable == null)
            {
                <SubTaskComponent SubTask="task" RefreshSubTasks="RefreshSubTasks"></SubTaskComponent>
            }
            else
            {
                Console.WriteLine(isTaskAvailable);
            }
        }

    }

    
}

<div class="centerTask">
    <MudFab Color="Color.Info" Style="margin-top: 2rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
</div>



@code {

    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new List<NoteModel>();
    List<Member> members = new List<Member>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();
        members = await memberService.GetMembers();

        await base.OnInitializedAsync();
    }

    //Code to make index page register a click when a task component is clicked
    //add OnActive="DeActivate" to a task component for this to work

    //public bool IsActive { get; set; }

    //void DeActivate(bool isActive)
    //{
    //    IsActive = isActive;
    //    foreach(var task in tasks)
    //    {
    //        if (IsActive)
    //        {
    //        Console.WriteLine($"{task.Name} is Active");
    //        }
    //    }
    //}

    void AddNewTask()
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        StateHasChanged();
    }

    void AddNewSubTask()
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        newTask.isSubTask = true;
        StateHasChanged();
    }


    public async Task RefreshList()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }

    public async void RefreshSubTasks()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        Console.WriteLine("Refresh SubTasks Has Been Called");
    }
}