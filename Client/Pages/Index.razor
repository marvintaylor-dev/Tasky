@page "/"
@inject IJSRuntime JS
@inject ITaskService taskService
@inject IMemberService memberService
@inject ISectionService sectionService
@attribute [Authorize]

<div class="titleContainer d-flex justify-content-center align-items-center">
    <h1 class="title">Welcome to <span class="titleName">T</span><MudIcon Color="Color.Secondary" Style="font-size: 2rem;" Icon="@Icons.Outlined.AlternateEmail" /><span class="titleName">sky</span></h1>
</div>

@if (sections.Count == 0)
{
    <div>no sections</div>
}
else
{
    @foreach (Section sec in sections)
    {
        <div>@sec.SectionName</div>
        <span @onclick="() => DeleteSection(sec.SectionId)">X</span>
    }
}


<button class="btn btn-primary" @onclick="ToggleInput">Add a Section +</button>
@if (ShowInput)
{
    <input type="text" placeholder="Enter Section" @bind-value="newSection.SectionName" @bind-value:event="oninput" />
    <button @onclick="SaveSection">Save</button>
}

@if (tasks.Count == 0)
{
    <h2>Click the "+" to add your first task!</h2>

    <MudFab Color="Color.Info" Style="margin-top: 2rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
}
else
{
    @foreach (var task in tasks)
    {
        if (task.isSubTask == false)
        {
            <TaskComponent Task="task" RefreshList="RefreshList" CallSubTask="() => AddNewSubTask(task.TaskId)" />

            @foreach (var t in tasks)
            {
                if (t.LinkTo == task.TaskId)
                {
                    <TaskComponent Task="t" RefreshList="RefreshList" CallSubTask="() => AddNewSubTask(task.TaskId)" />
                }
            }


            @*@foreach (var pair in taskDictionary)
                {
                @if (pair.Value.isSubTask == true && pair.Value.LinkTo == task.TaskId)
                {
                <TaskComponent Task="pair.Value" RefreshList="RefreshList" CallSubTask="() => AddNewSubTask(task.TaskId)"></TaskComponent>
                }
                }
            *@

        }
    }

}

<div class="centerTask">
    <MudFab Color="Color.Info" Style="margin-top: 2rem; margin-left: 10rem;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" @onclick="AddNewTask" />
</div>



@code {
    public bool ShowInput = false;

    public void ToggleInput()
    {
        ShowInput = !ShowInput;
    }


    //Dictionary<int, NoteModel> taskDictionary = new Dictionary<int, NoteModel>();
    NoteModel newTask = new NoteModel();
    List<NoteModel> tasks = new List<NoteModel>();
    Section newSection = new Section();
    List<Section> sections = new List<Section>();

    //public async Task DictionaryUpdate()
    //{
    //    @foreach (var task in tasks)
    //    {
    //        if (!taskDictionary.ContainsKey(task.TaskId))
    //        {
    //            taskDictionary.Add(task.TaskId, task);
    //        }
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();
        //await DictionaryUpdate();
        sections = await sectionService.GetSections();

        await memberService.GetMembers();
        await base.OnInitializedAsync();
    }

    //Code to make index page register a click when a task component is clicked
    //add OnActive="DeActivate" to a task component for this to work

    //public bool IsActive { get; set; }

    //void DeActivate(bool isActive)
    //{
    //    IsActive = isActive;
    //    foreach(var task in tasks)
    //    {
    //        if (IsActive)
    //        {
    //        Console.WriteLine($"{task.Name} is Active");
    //        }
    //    }
    //}
    async void SaveSection()
    {
        await sectionService.CreateSection(newSection);
        sections = await sectionService.GetSections();
        StateHasChanged();
    }

    async void DeleteSection(int sectionId)
    {
        await sectionService.DeleteSection(sectionId);
        sections = await sectionService.GetSections();
        StateHasChanged();
    }

    void AddNewTask()
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        newTask.isSubTask = false;
        StateHasChanged();
    }

    void AddNewSubTask(int taskId)
    {
        tasks.Add(newTask);
        newTask.Name = String.Empty;
        newTask.isSubTask = true;
        newTask.LinkTo = taskId;
        //await DictionaryUpdate();
        StateHasChanged();
    }


    public async Task RefreshList()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        Console.WriteLine("RefreshList Has Been Called");
    }
}