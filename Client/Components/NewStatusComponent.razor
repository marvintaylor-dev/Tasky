@using Tasky.Shared.DTOs;
@inject ITaskService taskService;
@inject IStatusService statusService;


<select name="status" @bind-value="Task.Status" @bind-value:event="oninput" @onchange="UpdateStatus" @onfocus="@ChildClicked" @onfocusout="@Deactivate">
    @foreach (var status in statuses)
    {
        <option value="@status.StatusId">@status.StatusName</option>
    }
</select>


@code {
    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    [Parameter]
    public EventCallback<bool> RefreshList { get; set; }

    private List<StatusDTO> statuses = new();
    private StatusDTO lastStatus = new();
    private StatusDTO secondStatus = new();

    protected override async Task OnInitializedAsync()
    {
        statuses = await statusService.GetAllStatuses();
        lastStatus = await statusService.GetLastStatus();
        secondStatus = await statusService.GetSecondStatus();
        await base.OnInitializedAsync();
    }

    private async void UpdateStatus(ChangeEventArgs e)
    {
        Console.WriteLine($"{Task.Status}");
        if (Task.TaskId == 0)
        {
            Console.WriteLine("Please add a Task Name before adding a status");
        }
        else if (Task.TaskId > 0)
        {
            if(Task.Status == lastStatus.StatusId && Task.EndDate == null)
            {
                Task.EndDate = DateTime.Now;
            }
            if(Task.Status == secondStatus.StatusId && Task.StartDate == null)
            {
                Task.StartDate = DateTime.Now;
            }
            await taskService.UpdateTask(Task);
            await OnClick.InvokeAsync(false);
            await RefreshList.InvokeAsync(true);
        }
    }


    //When tabbing through Child Clicked and Deactivate will notify the parent to display the Edit/Save button
    async void ChildClicked()
    {
        await OnClick.InvokeAsync(true);
    }

    async void Deactivate()
    {
        await OnClick.InvokeAsync(false);
    }
}