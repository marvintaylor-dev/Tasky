@using Tasky.Shared.DTOs;
@inject IMemberService memberService
@using System.Reflection

@*Styles for this page found in ReusableeTableComponent*@


<MudButton @onclick="ToggleOpen" Color="Color.Tertiary">User Configuration</MudButton>

@if (isOpen)
{
    <ReusableTableComponent Items="memberService.Members">
        <Header>
            @foreach (var prop in props)
            {
                if (prop.Name != "IsEditing" && prop.Name != "MemberId")
                {
                <th>@prop.Name</th>

                }
            }
        <th>Delete</th>
        </Header>
        <Row>
            @if (context.IsEditing)
            {
                <td><input type="text" @bind-value="@context.Name" /></td>
                <td><input type="text" @bind-value="@context.FirstName" /></td>
                <td><input type="text" @bind-value="@context.LastName" /></td>
                <td><input type="text" @bind-value="@context.Email" /></td>
                <td><input type="text" @bind-value="@context.Birthday" /></td>
                <td><input type="text" @bind-value="@context.Title" /></td>
                <td><input type="text" @bind-value="@context.Position" /></td>
                <td><input type="number" @bind-value="@context.WorkAssigned" /></td>
                <td><input type="text" @bind-value="@context.TimeZone" /></td>
                <td><input type="number" @bind-value="@context.TeamId" /></td>
                <td @onclick="()=>UpdateMember(context)">Save</td>
            }
            else
            {
                <td @onclick="() => MakeEditable(context)">@context.Name</td>
                <td @onclick="() => MakeEditable(context)">@context.FirstName</td>
                <td @onclick="() => MakeEditable(context)">@context.LastName</td>
                <td @onclick="() => MakeEditable(context)">@context.Email</td>
                <td @onclick="() => MakeEditable(context)">@context.Birthday</td>
                <td @onclick="() => MakeEditable(context)">@context.Title</td>
                <td @onclick="() => MakeEditable(context)">@context.Position</td>
                <td @onclick="() => MakeEditable(context)">@context.WorkAssigned</td>
                <td @onclick="() => MakeEditable(context)">@context.TimeZone</td>
                <td @onclick="() => MakeEditable(context)">@context.TeamId</td>

            }
            <td @onclick="()=>DeleteMember(context.MemberId)" style="color: red">&#10006;</td>
        </Row>
    </ReusableTableComponent>


    <h4 class="mt-4">Add a New Team Member</h4>
    <EditForm Model="@newMember" OnValidSubmit="@AddMember">
        <DataAnnotationsValidator />

        <div class="d-flex flex-column gap-1 col-lg-4 col-md-6 col-sm-12">
            <div class="form-group">
                <label for="member-name">Name</label>
                <InputText id="member-name" class="form-control" @bind-Value="newMember.Name" />
            </div>
            <div class="form-group">
                <label for="member-firstName">First Name</label>
                <InputText id="member-firstName" class="form-control" @bind-Value="newMember.FirstName" />
            </div>
            <div class="form-group">
                <label for="member-lastName">Last Name</label>
                <InputText id="member-lastName" class="form-control" @bind-Value="newMember.LastName" />
            </div>
            <div class="form-group">
                <label for="member-email">Email</label>
                <InputText id="member-email" class="form-control" @bind-Value="newMember.Email" />
                <ValidationMessage For="() => newMember.Email" class="validation-message" style="color: red" />
            </div>
            <div class="form-group">
                <label for="member-birthday">Birthday</label>
                <InputDate id="member-birthday" class="form-control" @bind-Value="newMember.Birthday" />
            </div>
            <div class="form-group">
                <label for="member-title">Job Title</label>
                <InputText id="member-title" class="form-control" @bind-Value="newMember.Title" />
            </div>
            <div class="form-group">
                <label for="member-position">Position</label>
                <InputText id="member-position" class="form-control" @bind-Value="newMember.Position" />
            </div>
            <div class="form-group">
                <label for="member-workAssigned">Work Assigned</label>
                <InputNumber id="member-workAssigned" class="form-control" @bind-Value="newMember.WorkAssigned" />
            </div>
            <div class="form-group">
                <label for="member-timezone">Time Zone</label>
                <InputText id="member-timezone" class="form-control" @bind-Value="newMember.TimeZone" />
            </div>
            <div class="form-group">
                <label for="member-teamId">Team Id</label>
                <InputNumber id="member-teamId" class="form-control" @bind-Value="newMember.TeamId" />
            </div>

            <button type="submit" class="btn btn-warning">Add New Member</button>

        </div>
    </EditForm>
}



@code {
    //public List<T> data = new();
    public MemberDTO newMember = new();
    private PropertyInfo[] props;

    private bool isOpen = false;

    void ToggleOpen()
    {
        isOpen = !isOpen;
    }

    async void AddMember()
    {
        await memberService.AddMember(newMember);
        await memberService.GetMembers();
        newMember = new MemberDTO();
        StateHasChanged();
    }

    async void DeleteMember(int id)
    {
        await memberService.DeleteMember(id);
        await memberService.GetMembers();
        StateHasChanged();
    }

    void MakeEditable(MemberDTO member)
    {
        member.IsEditing = true;
    }

    async void UpdateMember(MemberDTO member)
    {
        await memberService.UpdateMember(member);
        await memberService.GetMembers();
        member.IsEditing = false;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        await memberService.GetMembers();
        var memberType = typeof(MemberDTO);

        props = memberType.GetProperties();

        await base.OnInitializedAsync();
    }


}
