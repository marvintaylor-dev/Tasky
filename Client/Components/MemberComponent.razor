@inject IJSRuntime JS
@inject IMemberService memberService;

<div class="memberContainer" @onfocusout="UnClick">

    @if(Task.Assignee == 0)
    {
        
    <div>
        <MudIcon Icon="@Icons.Outlined.SupervisedUserCircle" Size="Size.Small" Color="Color.Default" @onclick="ToggleClicked" />
    </div>
    }

    @if(Task.Assignee > 0)
    {
         @foreach(var member in memberService.Members)
            {
                @if(member.MemberId == Task.Assignee)
                {
                    <div class="memberIcon" @onclick="ToggleClicked">
                            <div>@member.Name[0]</div>
                    </div>
                }
            }
    }

    <div class="memberDropdown @UserMenuCssClass">
        @if (memberService.Members.Count > 0)
        {
            <select size="10" @bind-value="Task.Assignee" @bind-value:event="onchange">
                <option selected value="0">Select One</option>
                @foreach (var member in memberService.Members)
                {
                    <option 
                        class="memberOption" 
                        value="@member.MemberId" 
                        @onclick="UnClick"
                    >
                        @member.Name
                    </option>
                }
            </select>
        }
    </div>
</div>

@code {
    [Parameter]
    public NoteModel? Task { get; set; }

    [Parameter]
    public bool ReadClicked { get; set; }

    public bool IsClicked { get; set; }

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    
    async Task UnClick()
    {
        await System.Threading.Tasks.Task.Delay(200);
        showMenu = false;
        IsClicked = false;
    }

    private bool showMenu = false;

    private string UserMenuCssClass => showMenu ? "showMenu" : null;

    async void ToggleClicked()
    {
        showMenu = !showMenu;
        IsClicked = !IsClicked;
        await OnClick.InvokeAsync(IsClicked);
    }

    protected override async Task OnParametersSetAsync()
    {
        await memberService.GetMembers();
        await base.OnParametersSetAsync();
    }

}
