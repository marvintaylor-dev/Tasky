@using Tasky.Shared.DTOs;
@inject IJSRuntime JS
@inject ITaskService taskService;
@inject ISprintService sprintService;
@inject IEstimationService estimationService;
@inject IEpicService epicService;


<div class="dropzone @dragClass"
     ondragover="event.preventDefault();"
     @ondragstart="DragStart"
     @ondragenter="DragEnter"
     @ondragleave="DragLeave"
     @ondrop="()=>HandleDrop(Task)">
</div>

<div draggable="true" @ondragstart="@(()=>HandleDragStart(Task))" class="d-flex align-items-center @SubtaskCss @heightOfTask">

    <div class="idStyle mud-elevation-1 @TaskOrSubtask d-flex gap-1 flex-column align-items-center justify-content-center">
        <p class="mb-0 RotateIdNumber">
            @Task.TaskId
        </p>
        <div>
            @if (Task.TasksSprints != null && Task.TasksSprints.Count > 0)
            {
                @foreach (var link in Task.TasksSprints)
                {
                    if (link.SprintId == CurrentSprintId)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.DirectionsRun" Color="Color.Surface"></MudIcon>
                    }
                }
            }
        </div>
    </div>

    <div id="@Task.TaskId" class="taskContainer mud-elevation-1 px-5  white @heightOfTask">

        <OrderComponent Task="Task" Active="Activate" RefreshList="RefreshList" />
        <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Default" @onclick="ToggleShowUserStory" Size="Size.Small" />
        @if (ShowUserStoriesOrTaskName)
        {
            <UserStoryInputComponent Active="Activate" Task="Task" RefreshList="RefreshList" />
        }
        else
        {
            <TaskInputComponent3 Active="Activate" Task="Task" RefreshList="RefreshList" />
        }
        @if (ShowOrHideCriteria)
        {
            <textarea cols="40" rows="4" @bind-value="Task.AcceptanceCriteria" @bind-value:event="oninput"></textarea>
        }
        else
        {
            <AcceptanceCriteriaComponent Task="Task" />
        }
        @if (Task.isSubTask == false && Task.TaskId > 0)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Link"
                       Variant="Variant.Outlined"
                       Style="@($"border:{Colors.Grey.Lighten1}; outline:{Colors.Grey.Lighten1}; padding: 2px;")"
                       Size="Size.Small" @onclick="() => AddNewSubTask(Task.TaskId)" />
            if (subtasks.Count > 0)
            {
                <button class="subtasksIcon" @onclick="toggleShow">@subtasks.Count</button>
            }
        }
        else if (Task.isSubTask == true)
        {
            <ReassignSubtaskComponent OnClick="Activate" Task="Task" />
        }

        <div style="cursor: pointer;">
            <div @onclick="TurnOffSplit" class="splitButton" style="border: 1px solid gray; padding: 0rem .25rem 0rem .25rem;">/</div>
        </div>



        <TagComponent Task="Task" OnClick="Activate" RefreshList="RefreshList" />


        <div>
            <NewStatusComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
        </div>
        <div>
            <EstimationComponent Task="Task" RefreshList="StateHasChanged" />
        </div>



        <div class="moreBtn" @onclick="showOptions">More...</div>





    </div>

    @if (Task.EpicId != null)
    {
        <div class="epicStyle mud-@epic.EpicColor.ToString().ToLower() mud-elevation-1">
            <p class="rotate90">@epic.EpicName</p>
        </div>
    }

</div>

@if (displayNone != "none")
{
    <div class="moreComponents mud-elevation-1 py-2 px-2 rounded white @displayNone ">


        <div class="moreComponentItem">
            <PriorityComponent OnClick="Activate" Task="Task" />
            <p>Set Priority Level</p>
        </div>
        <div class="moreComponentItem">
            <MemberComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task" RefreshList="RefreshList" />
            <p>Assign Task</p>
        </div>
        <div class="moreComponentItem">
            <DateComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
            <p>Set Start/End Dates</p>
        </div>
        <div class="moreComponentItem">
            <DeleteTaskComponent Task="Task" RefreshList="RefreshTasks" SimpleStateChange="InformPageOfStateChange" />
            <p>Delete This Task</p>
        </div>
        <div>
            <EditSaveComponent OnClick="Activate" Task="Task" RefreshList="RefreshTasks" />
        </div>

        <div class="d-flex justify-content-end">
            <span>
                <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error" @onclick="showOptions"></MudIcon>
            </span>
            <p>Close</p>
        </div>
    </div>
}

@if (show)
{
    @foreach (var t in subtasks)
    {
        <TaskComponent ShowOrHideCriteria="@ShowOrHideAcceptanceCriteria"
               Task="t"
               RefreshList="RefreshTasks"
               CallSubTask="() => AddNewSubTask(Task.TaskId)"
               SimpleStateChange="RemoveTaskWithoutCallingDB" />
    }
}


@if (showSplit)
{
    <SplittingComponent Task="Task" ClosePopup="HandleClosePopup" RefreshTasks="RefreshTasks" />
}





@code {
    [Parameter]
    public EventCallback<NoteModel> OnOrderUpdated { get; set; }

    [Parameter]
    public EventCallback<NoteModel> OnTaskDragged { get; set; }

    [Parameter]
    public int CurrentSprintId { get; set; }

    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    [Parameter]
    public EventCallback SimpleStateChange { get; set; }

    [Parameter]
    public bool ShowOrHideCriteria { get; set; }

    [Parameter]
    public bool ShowUserStoriesOrTaskName { get; set; }


    //public List<NoteModel> tasks = new List<NoteModel>();
    public List<NoteModel> subtasks = new List<NoteModel>();
    // public NoteModel newSubTask = new NoteModel();
    public Epic epic = new();
    public NoteModel newTask = new();
    public string message = "";
    public bool ShowOrHideAcceptanceCriteria = false;
    public bool ShowStoriesOrTaskName = false;
    public bool show = false;
    public bool showSplit = false;
    public bool showUserStory = true;
    public bool display = false;
    public string displayNone = "none";
    public NoteModel Payload = new();
    private string dragClass = string.Empty;
    public string TaskOrSubtask => Task.isSubTask == false ? "taskId" : "subtaskId";
    public bool IsClicked { get; set; }



    void ToggleShowUserStory()
    {
        ShowUserStoriesOrTaskName = !ShowUserStoriesOrTaskName;
        StateHasChanged();
    }

    void toggleShow()
    {
        show = !show;
    }

    void HandleClosePopup()
    {
        showSplit = false;
    }

    async void TurnOffSplit()
    {
        //await DisplayOff.InvokeAsync();
        showSplit = true;
        StateHasChanged();
    }

    public string SubtaskCss => Task.isSubTask == true ? "subtaskIndent" : "";

    void RemoveTaskWithoutCallingDB()
    {
        subtasks = subtasks.FindAll(x => x.TaskId != 0);
    }

    void AddNewSubTask(int taskId)
    {
        //var anyTaskWithZero = tasks.Find(x => x.TaskId == 0);
        var taskWithIdOfZero = subtasks.Find(x => x.TaskId == 0);
        if (taskWithIdOfZero == null)
        {
            // newTask.Name = "New Subtask";
            newTask.isSubTask = true;
            newTask.LinkTo = taskId;
            subtasks.Add(newTask);
            show = true;
            // await taskService.AddTask(newTask);
            //Task = await taskService.GetTaskById(taskId);
            StateHasChanged();
            newTask = new NoteModel();
        }
        else
        {
            message = "Save your newly created task or subtask before creating another.";
        }

    }

    void ToggleAcceptanceCriteriaVisibility()
    {
        ShowOrHideAcceptanceCriteria = !ShowOrHideAcceptanceCriteria;
        StateHasChanged();
    }


    void showOptions()
    {
        display = !display;
        if (display == true)
        {
            displayNone = "";
        }
        else
        {
            displayNone = "none";
        }
    }
   

  

    public void HandleDragStart(NoteModel selectedTask)
    {
        Payload = selectedTask;
        OnTaskDragged.InvokeAsync(Payload);
    }

    public void HandleDrop(NoteModel targetTask)
    {
        dragClass = "";
        OnOrderUpdated.InvokeAsync(targetTask);

        //OnOrderUpdated.InvokeAsync(task);
        //Task = null;
    }

    void DragEnter()
    {
        dragClass = "color";
    }
    void DragLeave()
    {
        dragClass = "";
    }
    void DragStart()
    {
        dragClass = "expand";
    }

    

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(500);
        IsClicked = false;
    }

    List<RelativeEstimation> Estimates = new();

    protected override async Task OnParametersSetAsync()
    {
        //turn off adblocker in google chrome - else an error will be thrown
        //await JS.InvokeVoidAsync("preventTextAreaLineChange");
        subtasks = await taskService.GetSubtasksByParentId(Task.TaskId);
        if (Task.EpicId != null)
        {
            epic = await epicService.GetEpicById((int)Task.EpicId);
        }
        await base.OnParametersSetAsync();
    }

    public string heightOfTask => Task.VisualHeightOfTask switch
    {
        0 => "",
        1 => "xs-height",
        2 => "s-height",
        3 => "m-height",
        4 => "l-height",
        5 => "xl-height",
        _ => ""
    };

    async void AddSubTask()
    {
        await CallSubTask.InvokeAsync();
    }

    //void AddNewSubTask()
    //{
    //    subtasks.Add(newSubTask);
    //    newSubTask.Name = String.Empty;
    //    newSubTask.isSubTask = true;
    //    newSubTask.LinkTo = Task.TaskId;
    //    StateHasChanged();
    //}

    public async void RefreshTasks()
    {
        StateHasChanged();
        await RefreshList.InvokeAsync();
    }

    void InformPageOfStateChange()
    {
        SimpleStateChange.InvokeAsync();
    }


    public async void Enter(KeyboardEventArgs e)
    {

        if (e.Code != "Enter")
        {
            Console.WriteLine(e.Code.ToString());
            IsClicked = true;
        }
        else if (e.Code == "Enter" && IsClicked == false)
        {
            Console.WriteLine(e.Code.ToString());
            return;
        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter" && IsClicked == true)
        {
            Console.WriteLine(e.Code.ToString());

            await ClickSaveBtn();

            IsClicked = false;
        }
    }


    public async Task ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
