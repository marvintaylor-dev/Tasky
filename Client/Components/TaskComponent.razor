@inject IJSRuntime JS
@inject ITaskService taskService;




<div id="@Task.TaskId" class="taskContainer @TaskOrSubtask mud-elevation-1 py-2 px-5 rounded white">
    <div class="d-flex gap-3">
        <OrderComponent Task="Task" Active="Activate" />
        <TaskInputComponent3 Active="Activate" Task="Task" />
        <div class="containerLeftComponents">
            @if (ShowOrHideCriteria)
            {
                <textarea cols="40" rows="4" @bind-value="Task.AcceptanceCriteria" @bind-value:event="oninput"></textarea>
            }
            else
            {
                <AcceptanceCriteriaComponent Task="Task" />
            }
            @if (Task.isSubTask == false && Task.TaskId > 0)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Link"
                           Variant="Variant.Outlined"
                           Style="@($"border:{Colors.Grey.Lighten1}; outline:{Colors.Grey.Lighten1}; padding: 2px;")"
                           Size="Size.Small" @onclick="AddSubTask" />
            }
            else if (Task.isSubTask == true)
            {
                <ReassignSubtaskComponent OnClick="Activate" Task="Task" />
            }
            <TagComponent Task="Task" OnClick="Activate" RefreshList="RefreshList" />

        </div>
    </div>

    <div class="taskContainerRight">
        <div class="taskComponentsContainer">
            <MemberComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task" RefreshList="RefreshList" />
            <PriorityComponent OnClick="Activate" Task="Task" />
            <NewStatusComponent OnClick="Activate" Task="Task" />
            <DateComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
        </div>
        <div class="taskButtonsContainer">
            <DeleteTaskComponent Task="Task" RefreshList="RefreshTasks" />
            @if (IsClicked)
            {
                <EditSaveComponent OnClick="Activate" Task="Task" RefreshList="RefreshTasks" />
            }
        </div>
    </div>
</div>




@code {
    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();

    public string SubtaskCss => Task.isSubTask == true ? "subtaskIndent" : "";


    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    [Parameter]
    public bool ShowOrHideCriteria { get; set; }

    public string TaskOrSubtask => Task.isSubTask == false ? "taskBorder" : "subtaskBorder";

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(500);
        IsClicked = false;
    }


    protected override async Task OnParametersSetAsync()
    {
        //turn off adblocker in google chrome - else an error will be thrown
        //await JS.InvokeVoidAsync("preventTextAreaLineChange");
        tasks = await taskService.GetTasks();
        await base.OnParametersSetAsync();
    }

    async void AddSubTask()
    {
        await CallSubTask.InvokeAsync();
    }

    void AddNewSubTask()
    {
        tasks.Add(newSubTask);
        newSubTask.Name = String.Empty;
        newSubTask.isSubTask = true;
        newSubTask.LinkTo = Task.TaskId;
        StateHasChanged();
    }

    public async void RefreshTasks()
    {

        StateHasChanged();
        await RefreshList.InvokeAsync();
        Console.WriteLine("Refresh SubTasks Has Been Called");
    }


    public async void Enter(KeyboardEventArgs e)
    {

        if (e.Code != "Enter")
        {
            Console.WriteLine(e.Code.ToString());
            IsClicked = true;
        }
        else if (e.Code == "Enter" && IsClicked == false)
        {
            Console.WriteLine(e.Code.ToString());
            return;
        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter" && IsClicked == true)
        {
            Console.WriteLine(e.Code.ToString());

            await ClickSaveBtn();

            IsClicked = false;
        }
    }


    public async Task ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
