@using Tasky.Shared.DTOs;
@inject IJSRuntime JS
@inject ITaskService taskService;
@inject ISprintService sprintService;


<div class="dropzone @dragClass"
     ondragover="event.preventDefault();"
     @ondragstart="DragStart"
     @ondragenter="DragEnter"
     @ondragleave="DragLeave"
     @ondrop="()=>HandleDrop(Task)">
</div>

<div draggable="true" @ondragstart="@(()=>HandleDragStart(Task))" class="d-flex align-items-center @SubtaskCss">
    <div class="idStyle @TaskOrSubtask">
        <p class="mb-0 RotateIdNumber">
            @Task.TaskId
        </p>
    </div>

    <div id="@Task.TaskId" class="taskContainer mud-elevation-1 py-2 px-5 rounded white">
        <OrderComponent Task="Task" Active="Activate" RefreshList="RefreshList" />
        <TaskInputComponent3 Active="Activate" Task="Task" RefreshList="RefreshList" />
        @if (ShowOrHideCriteria)
        {
            <textarea cols="40" rows="4" @bind-value="Task.AcceptanceCriteria" @bind-value:event="oninput"></textarea>
        }
        else
        {
            <AcceptanceCriteriaComponent Task="Task" />
        }
        @if (Task.isSubTask == false && Task.TaskId > 0)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Link"
                       Variant="Variant.Outlined"
                       Style="@($"border:{Colors.Grey.Lighten1}; outline:{Colors.Grey.Lighten1}; padding: 2px;")"
                       Size="Size.Small" @onclick="AddSubTask" />
        }
        else if (Task.isSubTask == true)
        {
            <ReassignSubtaskComponent OnClick="Activate" Task="Task" />
        }
        <TagComponent Task="Task" OnClick="Activate" RefreshList="RefreshList" />


        <div >
            <MemberComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task" RefreshList="RefreshList" />
        </div>


        <div class="moreBtn" @onclick="showOptions">More...</div>
        <div class="moreComponents mud-elevation-1 py-2 px-5 rounded white @displayNone ">
            <div >
                <PriorityComponent OnClick="Activate" Task="Task" />
            </div>
            <div >
                <NewStatusComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
            </div>
            <div >
                <EstimationComponent Task="Task" />
            </div>
            <div >
                <DateComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
            </div>
            <div >
                <DeleteTaskComponent Task="Task" RefreshList="RefreshTasks" SimpleStateChange="InformPageOfStateChange" />
            </div>
        </div>
        <div >
            @if (IsClicked)
            {
                <EditSaveComponent OnClick="Activate" Task="Task" RefreshList="RefreshTasks" />
            }
        </div>

    </div>
</div>






@code {
    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();

    public string SubtaskCss => Task.isSubTask == true ? "subtaskIndent" : "";

    void showOptions()
    {
        display = !display;
        if (display == true)
        {
            displayNone = "";
        }
        else
        {
            displayNone = "none";
        }
    }
    public bool display = false;
    public string displayNone = "none";

    [Parameter]
    public EventCallback<NoteModel> OnOrderUpdated { get; set; }

    [Parameter]
    public EventCallback<NoteModel> OnTaskDragged { get; set; }

    public NoteModel Payload = new();


    public void HandleDragStart(NoteModel selectedTask)
    {
        Payload = selectedTask;
        OnTaskDragged.InvokeAsync(Payload);
    }

    public void HandleDrop(NoteModel targetTask)
    {
        dragClass = "";
        OnOrderUpdated.InvokeAsync(targetTask);

        //OnOrderUpdated.InvokeAsync(task);
        //Task = null;
    }

    void DragEnter()
    {
        dragClass = "color";
    }
    void DragLeave()
    {
        dragClass = "";
    }
    void DragStart()
    {
        dragClass = "expand";
    }

    private string dragClass = string.Empty;

    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    [Parameter]
    public EventCallback SimpleStateChange { get; set; }

    [Parameter]
    public bool ShowOrHideCriteria { get; set; }

    public string TaskOrSubtask => Task.isSubTask == false ? "taskId" : "subtaskId";

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(500);
        IsClicked = false;
    }



    protected override async Task OnParametersSetAsync()
    {
        //turn off adblocker in google chrome - else an error will be thrown
        //await JS.InvokeVoidAsync("preventTextAreaLineChange");

        tasks = await taskService.GetTasks();
        await base.OnParametersSetAsync();
    }

    async void AddSubTask()
    {
        await CallSubTask.InvokeAsync();
    }

    void AddNewSubTask()
    {
        tasks.Add(newSubTask);
        newSubTask.Name = String.Empty;
        newSubTask.isSubTask = true;
        newSubTask.LinkTo = Task.TaskId;
        StateHasChanged();
    }

    public async void RefreshTasks()
    {
        StateHasChanged();
        await RefreshList.InvokeAsync();
    }

    void InformPageOfStateChange()
    {
        SimpleStateChange.InvokeAsync();
    }


    public async void Enter(KeyboardEventArgs e)
    {

        if (e.Code != "Enter")
        {
            Console.WriteLine(e.Code.ToString());
            IsClicked = true;
        }
        else if (e.Code == "Enter" && IsClicked == false)
        {
            Console.WriteLine(e.Code.ToString());
            return;
        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter" && IsClicked == true)
        {
            Console.WriteLine(e.Code.ToString());

            await ClickSaveBtn();

            IsClicked = false;
        }
    }


    public async Task ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
