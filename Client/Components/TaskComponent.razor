@inject IJSRuntime JS
@inject ITaskService taskService;


<div class="taskContainer @TaskOrSubtask mud-elevation-1 py-2 px-5 rounded white">
    <div class="d-flex gap-3">
        
        <TaskInputComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task"></TaskInputComponent>
        <div class="containerLeftComponents">
            @if (Task.isSubTask == false && Task.TaskId > 0)
            {
                <MudIconButton 
                    Icon="@Icons.Material.Filled.Link" 
                    Variant="Variant.Outlined" 
                    Style="@($"border:{Colors.Grey.Lighten1}; outline:{Colors.Grey.Lighten1}; padding: 2px;")" 
                    Size="Size.Small" @onclick="AddSubTask" 
                />
            }
            else if(Task.isSubTask == true)
            {
                <ReassignSubtaskComponent OnClick="Activate" Task="Task" />
            }
            <TagComponent Task="Task" OnClick="Activate" RefreshList="RefreshList"></TagComponent>
        </div>
    </div>

    <div class="taskContainerRight">
        <div class="taskComponentsContainer">
            <MemberComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task"  RefreshList="RefreshList"></MemberComponent>
            <PriorityComponent OnClick="Activate" Task="Task"></PriorityComponent>
            <StatusComponent OnClick="Activate" Task="Task"></StatusComponent>
            <DateComponent OnClick="Activate" Task="Task" RefreshList="RefreshList"></DateComponent>
        </div>
        <div class="taskButtonsContainer">
            <DeleteTaskComponent Task="Task" RefreshList="RefreshTasks"></DeleteTaskComponent>
            @if (IsClicked)
            {
                <EditSaveComponent OnClick="Activate" Task="Task" RefreshList="RefreshTasks"></EditSaveComponent>
            }
        </div>
    </div>
</div>




@code {
    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();


    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    public string TaskOrSubtask => Task.isSubTask == false ? "taskBorder" : "subtaskBorder";

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(1000);
        IsClicked = false;
    }


    protected override async Task OnParametersSetAsync()
    {
        tasks = await taskService.GetTasks();
        await base.OnParametersSetAsync();
    }

    async void AddSubTask()
    {
        await CallSubTask.InvokeAsync();
    }

    void AddNewSubTask()
    {
        tasks.Add(newSubTask);
        newSubTask.Name = String.Empty;
        newSubTask.isSubTask = true;
        newSubTask.LinkTo = Task.TaskId;
        StateHasChanged();
    }

    public async void RefreshTasks()
    {
        
        StateHasChanged();
        await RefreshList.InvokeAsync();
        Console.WriteLine("Refresh SubTasks Has Been Called");
    }

   
}
