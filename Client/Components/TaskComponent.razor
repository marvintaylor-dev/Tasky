@using Tasky.Shared.DTOs;
@inject IJSRuntime JS
@inject ITaskService taskService;
@inject ISprintService sprintService;
@inject IEstimationService estimationService;
@inject IEpicService epicService;


<div class="dropzone @dragClass"
     ondragover="event.preventDefault();"
     @ondragstart="DragStart"
     @ondragenter="DragEnter"
     @ondragleave="DragLeave"
     @ondrop="()=>HandleDrop(Task)">
</div>

<div draggable="true" @ondragstart="@(()=>HandleDragStart(Task))" class="d-flex align-items-center @SubtaskCss @heightOfTask">

    <div class="idStyle mud-elevation-1 @TaskOrSubtask d-flex gap-1 flex-column align-items-center justify-content-center">
        <p class="mb-0 RotateIdNumber">
            @Task.TaskId
        </p>
        <div>
            @if (Task.TasksSprints != null && Task.TasksSprints.Count > 0)
            {
                @foreach (var link in Task.TasksSprints)
                {
                    if (link.SprintId == CurrentSprintId)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.DirectionsRun" Color="Color.Surface"></MudIcon>
                    }
                }
            }
        </div>
    </div>

    <div id="@Task.TaskId" class="taskContainer mud-elevation-1 px-5  white @heightOfTask">

        <OrderComponent Task="Task" Active="Activate" RefreshList="RefreshList" />
        <TaskInputComponent3 Active="Activate" Task="Task" RefreshList="RefreshList" />
        @if (ShowOrHideCriteria)
        {
            <textarea cols="40" rows="4" @bind-value="Task.AcceptanceCriteria" @bind-value:event="oninput"></textarea>
        }
        else
        {
            <AcceptanceCriteriaComponent Task="Task" />
        }
        @if (Task.isSubTask == false && Task.TaskId > 0)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Link"
                       Variant="Variant.Outlined"
                       Style="@($"border:{Colors.Grey.Lighten1}; outline:{Colors.Grey.Lighten1}; padding: 2px;")"
                       Size="Size.Small" @onclick="AddSubTask" />
        }
        else if (Task.isSubTask == true)
        {
            <ReassignSubtaskComponent OnClick="Activate" Task="Task" />
        }
        <TagComponent Task="Task" OnClick="Activate" RefreshList="RefreshList" />


        <div>
            <NewStatusComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
        </div>
        <div>
            <EstimationComponent Task="Task" RefreshList="StateHasChanged" />
        </div>

     

        <div class="moreBtn" @onclick="showOptions">More...</div>

       
       

        <div class="moreComponents mud-elevation-1 py-2 px-2 rounded white @displayNone ">
            <div class="d-flex justify-content-end">
                <span>

                    <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error" @onclick="showOptions"></MudIcon>
                </span>
            </div>

            <div class="moreComponentItem">
                <PriorityComponent OnClick="Activate" Task="Task" />
                <p>Set Priority Level</p>
            </div>
            <div class="moreComponentItem">
                <MemberComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task" RefreshList="RefreshList" />
                <p>Assign Task</p>
            </div>
            <div class="moreComponentItem">
                <DateComponent OnClick="Activate" Task="Task" RefreshList="RefreshList" />
                <p>Set Start/End Dates</p>
            </div>
            <div class="moreComponentItem">
                <DeleteTaskComponent Task="Task" RefreshList="RefreshTasks" SimpleStateChange="InformPageOfStateChange" />
                <p>Delete This Task</p>
            </div>
        </div>
        <div>
            @if (IsClicked)
            {
                <EditSaveComponent OnClick="Activate" Task="Task" RefreshList="RefreshTasks" />
            }
        </div>

    </div>

    @if (Task.EpicId != 0)
    {
        foreach (var epic in epics)
        {
            if (epic.EpicId == Task.EpicId)
            {
                <div class="epicStyle mud-@epic.EpicColor.ToString().ToLower() mud-elevation-1 d-flex flex-column align-items-center justify-content-center">
                    <p class="rotate90">@epic.EpicName</p>
                </div>
            }
        }
    }

    
</div>








@code {
    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();
    public List<Epic> epics = new();

    public string SubtaskCss => Task.isSubTask == true ? "subtaskIndent" : "";


    void showOptions()
    {
        display = !display;
        if (display == true)
        {
            displayNone = "";
        }
        else
        {
            displayNone = "none";
        }
    }
    public bool display = false;
    public string displayNone = "none";

    [Parameter]
    public EventCallback<NoteModel> OnOrderUpdated { get; set; }

    [Parameter]
    public EventCallback<NoteModel> OnTaskDragged { get; set; }

    public NoteModel Payload = new();

    [Parameter]
    public int CurrentSprintId { get; set; }


    public void HandleDragStart(NoteModel selectedTask)
    {
        Payload = selectedTask;
        OnTaskDragged.InvokeAsync(Payload);
    }

    public void HandleDrop(NoteModel targetTask)
    {
        dragClass = "";
        OnOrderUpdated.InvokeAsync(targetTask);

        //OnOrderUpdated.InvokeAsync(task);
        //Task = null;
    }

    void DragEnter()
    {
        dragClass = "color";
    }
    void DragLeave()
    {
        dragClass = "";
    }
    void DragStart()
    {
        dragClass = "expand";
    }

    private string dragClass = string.Empty;

    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    [Parameter]
    public EventCallback SimpleStateChange { get; set; }

    [Parameter]
    public bool ShowOrHideCriteria { get; set; }

    public string TaskOrSubtask => Task.isSubTask == false ? "taskId" : "subtaskId";

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(500);
        IsClicked = false;
    }

    List<RelativeEstimation> Estimates = new();

    protected override async Task OnParametersSetAsync()
    {
        //turn off adblocker in google chrome - else an error will be thrown
        //await JS.InvokeVoidAsync("preventTextAreaLineChange");

        tasks = await taskService.GetTasks();
        epics = await epicService.GetAllEpics();
        await base.OnParametersSetAsync();
    }

    public string heightOfTask => Task.VisualHeightOfTask switch
    {
        0 => "",
        1 => "xs-height",
        2 => "s-height",
        3 => "m-height",
        4 => "l-height",
        5 => "xl-height",
        _ => ""
    };

    async void AddSubTask()
    {
        await CallSubTask.InvokeAsync();
    }

    void AddNewSubTask()
    {
        tasks.Add(newSubTask);
        newSubTask.Name = String.Empty;
        newSubTask.isSubTask = true;
        newSubTask.LinkTo = Task.TaskId;
        StateHasChanged();
    }

    public async void RefreshTasks()
    {
        StateHasChanged();
        await RefreshList.InvokeAsync();
    }

    void InformPageOfStateChange()
    {
        SimpleStateChange.InvokeAsync();
    }


    public async void Enter(KeyboardEventArgs e)
    {

        if (e.Code != "Enter")
        {
            Console.WriteLine(e.Code.ToString());
            IsClicked = true;
        }
        else if (e.Code == "Enter" && IsClicked == false)
        {
            Console.WriteLine(e.Code.ToString());
            return;
        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter" && IsClicked == true)
        {
            Console.WriteLine(e.Code.ToString());

            await ClickSaveBtn();

            IsClicked = false;
        }
    }


    public async Task ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
