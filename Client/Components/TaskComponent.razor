@using Tasky.Client.Services
@inject IJSRuntime JS
@inject ITaskService taskService;


<div class="taskContainer">
    <div class="d-flex gap-5">
        <TaskInputComponent ReadClicked="IsClicked" OnClick="Activate" Task="Task"></TaskInputComponent>
        @if (Task.isSubTask == false && Task.TaskId > 0)
        {
            <button @onclick="AddNewSubTask">&#167;</button>
        }
    </div>

    <div class="taskInfoContainer">
        <MemberComponent OnClick="Activate" Task="Task"></MemberComponent>
        <PriorityComponent OnClick="Activate" Task="Task"></PriorityComponent>
        <StatusComponent OnClick="Activate" Task="Task"></StatusComponent>
        <DateComponent OnClick="Activate" Task="Task"></DateComponent>
        <DeleteTaskComponent Task="Task" RefreshList="RefreshList"></DeleteTaskComponent>
        @if(IsClicked)
        {
        <EditSaveComponent OnClick="Activate" Task="Task" RefreshList="RefreshList"></EditSaveComponent>
        }
    </div>

</div>


@foreach (var task in tasks)
{
    if (task.isSubTask == true)
    {
        if (task.LinkTo == Task.TaskId)
        {
            <SubTaskComponent SubTask="task" RefreshSubTasks="RefreshSubTasks" CallSubTask="AddSubTask"></SubTaskComponent>
        }
    }
}



@code {
    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;   
    }


    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        tasks = await taskService.GetTasks();
        await base.OnParametersSetAsync();
    }

    async void AddSubTask()
    {
        await CallSubTask.InvokeAsync();
    }

    void AddNewSubTask()
    {
        tasks.Add(newSubTask);
        newSubTask.Name = String.Empty;
        newSubTask.isSubTask = true;
        newSubTask.LinkTo = Task.TaskId;
        StateHasChanged();
    }

    public async void RefreshSubTasks()
    {
        tasks = await taskService.GetTasks();
        StateHasChanged();
        await RefreshList.InvokeAsync();
        Console.WriteLine("Refresh SubTasks Has Been Called");
    }

}
