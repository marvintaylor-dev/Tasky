@inject IJSRuntime JS;
@inject ITaskService taskService;

<div class="taskInput d-flex justify-content-left align-items-center @SubtaskCss">
    <textarea id="taskInput"
              placeholder="Enter Task Name"
              rows="2" cols="30"
              @onkeyup="KeyPressed"
              @onfocusout="DeActivate"
              @bind-value="Task.Name"
              @bind-value:event="oninput" />
</div>

@code {

    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback<bool> Active { get; set; }

    public string SubtaskCss => Task.isSubTask == true ? "subtaskIndent" : "";

    public async void DeActivate()
    {
        await Active.InvokeAsync(false);
    }

    public async void KeyPressed(KeyboardEventArgs e)
    {
        try
        {
            if (e.Code != "Enter")
            {
                //send message to parent that child is active and buttons should be displayed
                await Active.InvokeAsync(true);
            }
            else if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                if (Task.TaskId > 0)
                {
                    await taskService.UpdateTask(Task);

                }
                else if (Task.TaskId == 0)
                {
                    await taskService.AddTask(Task);
                }

                //send message to parent that child is inactive and buttons should be hidden
                await Active.InvokeAsync(false);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
        }

       
    }

}
