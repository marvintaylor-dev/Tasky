<select @bind-value="Task.PriorityLevel" @bind-value:event="onchange" @onfocus="ChildClicked">
    @foreach (var priority in priorities)
    {
        <option value="@priority">@SplitCamelCase(priority.ToString())</option>
    }
</select>


@code {

    [Parameter]
    public NoteModel Task { get; set; }

    public bool IsClicked { get; set; }

    //public int colorSelected = 0;

    //public string ColorSelected = string.Empty;

    //public void ChangeColor()
    //{
    //    Console.WriteLine("Hello");
    //    ColorSelected = PriorityColor(Task.PriorityLevel);
    //    StateHasChanged();
    //}

    //public string PriorityColor(Priority priorityLevel)
    //{
    //    switch (priorityLevel)
    //    {
    //        case Priority.WouldHave:
    //            return "one";

    //        case Priority.CouldHave:
    //            return "two";

    //        case Priority.ShouldHave:
    //            return "three";

    //        case Priority.MustHave:
    //            return "four";

    //        default:
    //            return "five";

    //    }
    //}

    Array priorities;

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    async void ChildClicked()
    {
        IsClicked = true;
        await OnClick.InvokeAsync(IsClicked);
    }

    protected override async Task OnParametersSetAsync()
    {
        priorities = Enum.GetValues(typeof(Priority));
        await base.OnParametersSetAsync();
    }

     public static string SplitCamelCase(string input)
    {
        return System.Text.RegularExpressions.Regex.Replace(input, "([A-Z])", " $1", System.Text.RegularExpressions.RegexOptions.Compiled).Trim();
    }

}
