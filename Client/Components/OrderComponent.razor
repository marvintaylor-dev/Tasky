@inject ITaskService taskService

<div class="d-flex flex-column justify-content-center align-items-center">
    @if (Task.Order == null)
    {
        <div @onclick="ToggleEditOrder" style="font-size: .7rem;">Order</div>
    }

    @if (!EditOrder)
    {
        <div @onclick="ToggleEditOrder">@Task.Order</div>
    }
    else
    {
        <input type="number"
               min="0"
               style="width: 60px; border: 1px solid black; padding-left: 2%; border-radius: .3rem;"
           @onfocusout="ToggleEditOrder"
           @bind-value="Task.Order"
           @bind-value:event="oninput"
           @onchange="Activate"
           @onkeydown="KeyPressed" />
    }
</div>


@code {
    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback<bool> Active { get; set; }

    [Parameter]
    public EventCallback<bool> RefreshList { get; set; }

    private bool EditOrder = false;

    void ToggleEditOrder()
    {
        EditOrder = !EditOrder;
    }

    void Activate()
    {
        Active.InvokeAsync(true);
    }

    public async void KeyPressed(KeyboardEventArgs e)
    {
        try
        {
            if (e.Code != "Enter")
            {
                //send message to parent that child is active and buttons should be displayed
                await Active.InvokeAsync(true);
            }
            else if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                if (Task.TaskId > 0)
                {
                    await taskService.UpdateTask(Task);
                    await RefreshList.InvokeAsync();
                }
                else if (Task.TaskId == 0)
                {
                    await taskService.AddTask(Task);
                    await RefreshList.InvokeAsync();
                }

                //send message to parent that child is inactive and buttons should be hidden
                await Active.InvokeAsync(false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
        }
    }



}
