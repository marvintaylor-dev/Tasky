@using Tasky.Shared.DTOs;
@inject ISprintService sprintService
@inject ITaskService taskService


@if (sprintService.Sprints.Count > 0)
{
    <div class="d-flex flex-column" @onclick="GetTaskList">

        <label for="sprints">Change Sprints:</label>
        <select name="sprints" style="margin-bottom: 1rem; margin-right: 1rem;" @bind-value="sprintIdNumber" @bind-value:event="oninput" @onchange="UpdateSprintValue">
            @foreach (var sprint in sprintService.Sprints)
            {
                <option value="@sprint.SprintId">@sprint.StartDate.ToShortDateString()</option>
            }
        </select>

@*
        Display Sprint Id Number
        <div>Sprint Id #: @sprintIdNumber</div>
*@

        <div class="drop-container d-flex flex-column align-items-center justify-content-center @dragClass"
             ondragover="event.preventDefault();"
         @ondragstart="DragStart"
         @ondragenter="DragEnter"
         @ondragleave="DragLeave"
         @ondrop="()=>HandleDrop(Payload)">
            <div class="drop-container-text">
                Drag and Drop Tasks Here to Add to Sprint
            </div>

            @if (sprintService.Sprint != null)
            {
                <div class="sprintTasks">
                    @sprintService.Sprint.AssignedTasks.Count
                </div>
            }

            <div class="sprintList @displaySprintItems">
                <p style="font-weight: bold;">Sprint Items</p>
                <ol>
                    @if (Sprint != null)
                    {
                        @foreach (var task in Sprint.AssignedTasks)
                        {
                            <li>@task.Name <button style="color: red; margin-left: 1rem;" @onclick="() => RemoveTaskFromSprint(task)">Remove</button></li>
                        }
                    }
                </ol>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex flex-column" @onclick="ShowInfo">

        <div class="drop-container d-flex flex-column align-items-center justify-content-center">
            <a class="drop-container-text" href="/sprintbacklog">Create a Sprint</a>

        
            <div class="sprintList @displaySprintItems">
                <p style="font-weight: bold;">Start Creating your sprint</p>
                <ol>
                    <li>Click Create a Sprint or go to the Sprint Backlog.</li>
                    <li>Click <b>Manage Sprints</b>.</li>
                    <li>Enter the appropriate information for your sprint.</li>
                    <li>Return to your backlog page and drag and drop into your sprint!</li>
                </ol>
            </div>
        </div>
    </div>
}




@code {

    [Parameter]
    public NoteModel? Payload { get; set; }

    [Parameter]
    public EventCallback OnDrop { get; set; }

    [Parameter]
    public EventCallback<int> IdNumber { get; set; }

    SprintModel Sprint = new();
    SprintTaskDTO newLink = new();
    public int sprintIdNumber;
    public string displaySprintItems = "hide";

    public async Task HandleDrop(NoteModel item)
    {
        if (Payload != null)
        {
            await IdNumber.InvokeAsync();
            newLink.SprintId = sprintService.Sprint.SprintId;
            newLink.TaskId = item.TaskId;
            await sprintService.LinkSprint(newLink);
            await sprintService.GetSprintById(sprintIdNumber);
            StateHasChanged();
            newLink = new();
            await OnDrop.InvokeAsync();
            //var updateTask = await taskService.GetTaskById(item.TaskId);
            //updateTask.AssignedToSprintId = sprintService.Sprint.SprintId;
            //await taskService.UpdateTask(updateTask);
            //sprintService.Sprint.AssignedTasks.Add(item);
        }
        dragClass = "";
    }

    void ToggleListVisibility()
    {
        if (displaySprintItems == "show")
        {
            displaySprintItems = "hide";
        }
        else
        {
            displaySprintItems = "show";
        }
    }

    async Task GetTaskList()
    {
        ToggleListVisibility();
        await sprintService.GetSprintById(sprintIdNumber);
        Sprint = sprintService.Sprint;
        StateHasChanged();
    }

    async Task ShowInfo()
    {
        ToggleListVisibility();
        StateHasChanged();
    }

    async void RemoveTaskFromSprint(NoteModel task)
    {
        task.AssignedToSprint = null;
        await taskService.UpdateTask(task);
        await sprintService.GetSprintById(sprintIdNumber);
        Sprint = sprintService.Sprint;
        StateHasChanged();
        //refresh the container
    }

    async void UpdateSprintValue()
    {
        await sprintService.GetSprintById(sprintIdNumber);
        StateHasChanged();
    }

    private string dragClass = string.Empty;

    void DragEnter()
    {
        dragClass = "color";
    }
    void DragLeave()
    {
        dragClass = "";
    }
    void DragStart()
    {
        dragClass = "expand";
    }

    protected override async Task OnInitializedAsync()
    {
        await sprintService.GetSprints();
        if (sprintService.Sprints.Count > 0)
        {
            //Needs to be adjusted to the last sprint instead of the first sprint.
            sprintIdNumber = sprintService.Sprints[0].SprintId;
            await sprintService.GetSprintById(sprintIdNumber);
        }
        await base.OnInitializedAsync();
    }

}
