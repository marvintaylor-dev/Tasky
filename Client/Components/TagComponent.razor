@inject ITagService tagService;
@inject ITaskService taskService;
@inject IJSRuntime JS


<div class="tagContainer">
    @if (Task.Tag == null)
    {
        <MudIcon Icon="@Icons.Outlined.Label" Size="Size.Small" Color="Color.Info" @onclick="ToggleDropdown" @onfocus="ChildClicked" />
    }
    else if (newTag.TagId > 0)
    {
        <MudChip Variant="Variant.Outlined" Size="Size.Small" Color="ColorIs" @onclick="OpenDropdown" @onfocus="ChildClicked">@newTag.TagName</MudChip>
    }

    @if (OnOpenDropdown)
    {
        <div class="colorDropdown">
            <div class="colorDropdownHeading">Choose a Tag Name and Color:</div>
            <div class="tagContainer mb-3">
                <input class="tagInput"
                   autofocus
                   type="text"
                   placeholder="Assign a Tag Name"
                   @bind-value="newTag.TagName"
                   @bind-value:event="oninput" />
            </div>
            <div class="colorContainer mb-3">
                @foreach (MudBlazor.Color color in Enum.GetValues(typeof(TagColor)))
                {
                    <MudIcon Class="colorIcon" Icon="@Icons.Filled.Circle" Color="color" @onclick="(() => UseThisColor(color))" />
                }
            </div>
            @if (newTag.TagName != string.Empty)
            {
                <div>
                    <MudChip Variant="Variant.Outlined" Size="Size.Small" Color="ColorIs">@newTag.TagName</MudChip>
                </div>
                <div class="tagSaveBtn" @onclick="(() => SaveTag(newTag))">Save Tag</div>
            }
           
            


            <div class="tagDropdown">
                <div class="mb-3">Or use existing Tags:</div>
                @foreach (Tag tag in tags)
                {
                    <div class="tagAndTrashBtns">
                        <MudChip Variant="Variant.Outlined" Size="Size.Small" Color="(MudBlazor.Color)tag.Color" @onclick="(()=>BindTagId(tag))">@tag.TagName</MudChip>
                        <DeleteTagComponent Task="Task" Tag="tag" RefreshTags="RefreshTagsAndTasks"></DeleteTagComponent>
                    </div>
                }
            </div>
        </div>

    }


    
</div>

@foreach (var tag in tags)
{
    @if (tag.TagId == Task.Tag)
    {
        <div class="tagContainer">
                <MudChip Variant="Variant.Text" OnClose="Closed" Size="Size.Small" Color="(MudBlazor.Color)tag.Color" @onclick="ToggleDropdown">@tag.TagName</MudChip>
        </div>
    }
}



@code {
    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    public Tag newTag = new Tag();


    public List<Tag> tags = new List<Tag>();

    public MudBlazor.Color ColorIs { get; set; } = Color.Default;

    private bool IsClicked { get; set; }

    void Closed(MudChip chip)
    {
        Task.Tag = null;
        taskService.UpdateTask(Task);
        StateHasChanged();
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(200);
        IsClicked = false;
    }

    public bool showContent = false;

    public string ShowContent => !showContent ? "hide" : null;



    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await GetTags();
        newTag.TagName = String.Empty;
        newTag.Color = TagColor.Default;
        await base.OnParametersSetAsync();
    }

    public async Task GetTags()
    {
        tags = await tagService.GetAllTags();
    }

    public async Task RefreshTagsAndTasks()
    {
        GetTags();
        await RefreshList.InvokeAsync();
    }

    async void ChildClicked()
    {
        IsClicked = true;
        await OnClick.InvokeAsync(IsClicked);
    }

    public bool OnOpenDropdown { get; set; }


    public void OpenDropdown()
    {
        OnOpenDropdown = true;
        ChildClicked();
    }

    public async void CloseDropdown()
    {
        OnOpenDropdown = false;
    }

    public void ToggleDropdown()
    {
        OnOpenDropdown = !OnOpenDropdown;
    }

    public async void UseThisColor(MudBlazor.Color color)
    {
        ColorIs = color;
        newTag.Color = (TagColor)color;
    }

    public async Task BindTagId(Tag savedTag)
    {
        Task.Tag = savedTag.TagId;
        taskService.UpdateTask(Task);
        CloseDropdown();
    }

    public async void SaveTag(Tag saveTag)
    {
        var savedTag = await tagService.AddTag(saveTag);
        await BindTagId(savedTag);
        StateHasChanged();
        CloseDropdown();
    }

}
