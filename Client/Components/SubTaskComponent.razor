@using System.Reflection
@using static Tasky.Shared.NoteModel
@inject IJSRuntime JS
@inject IMemberService memberService;
@inject ITaskService taskService;


<div class="taskContainer subtaskContainer mud-elevation-1 py-2 px-5 rounded white">
    <div class="taskContainerLeft">
        <div class="subtaskSpacer"></div>
        <TaskInputComponent ReadClicked="IsClicked" OnClick="Activate" Task="SubTask" />
        <div class="containerLeftComponents">
        <ReassignSubtaskComponent OnClick="Activate" Task="SubTask" />
        <TagComponent Task="SubTask" OnClick="Activate"></TagComponent>
        </div>
    </div>
    <div class="taskContainerRight">
        <div class="taskComponentsContainer">
            <MemberComponent OnClick="Activate" Task="SubTask" />
            <PriorityComponent OnClick="Activate" Task="SubTask" />
            <StatusComponent OnClick="Activate" Task="SubTask" />
            <DateComponent OnClick="Activate" Task="SubTask" />
        </div>
        <div class="taskButtonsContainer">
            <DeleteTaskComponent Task="SubTask" RefreshList="RefreshSubTasks" />
            @if (IsClicked)
            {
                <EditSaveComponent OnClick="Activate" Task="SubTask" RefreshList="RefreshSubTasks" />
            }
        </div>
    </div>
</div>



@code {

    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();


    [Parameter]
    public NoteModel SubTask { get; set; }

    [Parameter]
    public EventCallback RefreshSubTasks { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }

    private async Task DeActivate()
    {
        await System.Threading.Tasks.Task.Delay(200);
        IsClicked = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        tasks = await taskService.GetTasks();
        await base.OnParametersSetAsync();
    }



    async void SaveTask(NoteModel task)
    {
        await taskService.AddTask(task);
        UnClick();
        await RefreshSubTasks.InvokeAsync();
    }

    async void DeleteSubTask(int id)
    {
        await taskService.DeleteTask(id);
        await RefreshSubTasks.InvokeAsync();
    }

    async void EditTask(NoteModel task)
    {
        await taskService.UpdateTask(task);
        UnClick();
        await RefreshSubTasks.InvokeAsync();
    }

    async void DeleteUnsavedSubTask()
    {
        tasks.Remove(SubTask);
        await RefreshSubTasks.InvokeAsync();
    }

    void UnClick()
    {
        IsClicked = false;
    }

    void Clicked()
    {
        IsClicked = true;
    }

    void toggleIsClicked()
    {
        IsClicked = !IsClicked;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ClickSaveBtn();
        }
    }

    public void EnterOnSelect(EventArgs e)
    {
        ClickSaveBtn();
    }

    public async void ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
