@using System.Reflection
@using Tasky.Client.Services
@using static Tasky.Shared.NoteModel
@inject IJSRuntime JS
@inject IMemberService memberService;
@inject ITaskService taskService;


<div class="taskContainer subtaskContainer">
    <TaskInputComponent ReadClicked="IsClicked" OnClick="Activate" Task="SubTask"></TaskInputComponent>
    <div class="taskContainerRight">
        <div class="taskComponentsContainer">
            <div>
                <div class="taskFont">Reassign to:</div>
                <select @bind-value="SubTask.LinkTo" @bind-value:event="onchange" @onfocus="@Clicked">
                    @foreach (var task in tasks)
                    {
                        if (task.isSubTask == false)
                        {
                            <option @onkeydown="@Enter" value="@task.TaskId">@task.Name</option>
                        }
                        else
                        {
                            <select>
                                <option>No Options</option>
                            </select>
                        }
                    }
                </select>
            </div>
            <MemberComponent OnClick="Activate" Task="SubTask"></MemberComponent>
            <PriorityComponent OnClick="Activate" Task="SubTask"></PriorityComponent>
            <StatusComponent OnClick="Activate" Task="SubTask"></StatusComponent>
            <DateComponent OnClick="Activate" Task="SubTask"></DateComponent>
        </div>
        <div class="taskButtonsContainer">
            <DeleteTaskComponent Task="SubTask" RefreshList="RefreshSubTasks"></DeleteTaskComponent>
            @if (IsClicked)
            {
                <EditSaveComponent OnClick="Activate" Task="SubTask" RefreshList="RefreshSubTasks"></EditSaveComponent>
            }
        </div>
    </div>
</div>



@code {

    public List<NoteModel> tasks = new List<NoteModel>();
    public NoteModel newSubTask = new NoteModel();


    [Parameter]
    public NoteModel SubTask { get; set; }

    [Parameter]
    public EventCallback RefreshSubTasks { get; set; }

    [Parameter]
    public EventCallback CallSubTask { get; set; }

    public bool IsClicked { get; set; }

    void Activate(bool isClicked)
    {
        IsClicked = isClicked;
    }


    protected override async Task OnParametersSetAsync()
    {
        tasks = await taskService.GetTasks();
        await base.OnParametersSetAsync();
    }



    async void SaveTask(NoteModel task)
    {
        await taskService.AddTask(task);
        UnClick();
        await RefreshSubTasks.InvokeAsync();
    }

    async void DeleteSubTask(int id)
    {
        await taskService.DeleteTask(id);
        await RefreshSubTasks.InvokeAsync();
    }

    async void EditTask(NoteModel task)
    {
        await taskService.UpdateTask(task);
        UnClick();
        await RefreshSubTasks.InvokeAsync();
    }

    async void DeleteUnsavedSubTask()
    {
        tasks.Remove(SubTask);
        await RefreshSubTasks.InvokeAsync();
    }

    void UnClick()
    {
        IsClicked = false;
    }

    void Clicked()
    {
        IsClicked = true;
    }

    void toggleIsClicked()
    {
        IsClicked = !IsClicked;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ClickSaveBtn();
        }
    }

    public void EnterOnSelect(EventArgs e)
    {
        ClickSaveBtn();
    }

    public async void ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
