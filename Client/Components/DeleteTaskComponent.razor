@inject ITaskService taskService;


@if (Task.TaskId > 0)
{
    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="(()=> DeleteTaskMessage(Task))" />
    <div class="position-relative">
        <div class="deleteDialogue @showDialogue">
            <div class="mb-3"><b>@DeletionMessage</b></div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-outline-dark btn-sm" @onclick="() => DeleteTask(Task.TaskId)">Yes</button>
                <button class="btn btn-danger btn-sm" @onclick="DoNotDelete">No</button>
            </div>
        </div>
    </div>
}
else
{
    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="(()=> DeleteUnsavedTask())" />
    <div></div>
}

@code {

    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public EventCallback SimpleStateChange { get; set; }

    public List<NoteModel> tasks = new List<NoteModel>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();
        await base.OnInitializedAsync();
    }
    bool Clicked = false;

    string DeletionMessage;
    string showDialogue => Clicked == false ? "" : "show";

    void DeleteTaskMessage(NoteModel taskToDelete)
    {
        Clicked = true;
        DeletionMessage = $"Are you sure you want to delete {taskToDelete.Name}?";
    }

    void DoNotDelete()
    {
        Clicked = false;
    }



    async void DeleteTask(int id)
    {
        await taskService.DeleteTask(id);
        Clicked = false;
        await RefreshList.InvokeAsync();
    }

    void DeleteUnsavedTask()
    {
        tasks.Remove(Task);
        SimpleStateChange.InvokeAsync();
    }
}
