@page "/sprintbacklog/board"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject ITaskService taskService;
@inject IEditSaveService EditSaveService;
@inject IStatusService statusService;
@inject ISprintService sprintService;
@attribute [Authorize]
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Rendering;
@using Tasky.Shared.DTOs;


<div class="titleContainer d-flex flex-column justify-content-center align-items-center">
    <h3>Board View</h3>
    @*People will want an overall WIP limit here*@
</div>


<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.StatusName == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>
        @foreach (var item in _sections)
        {

            <MudPaper Elevation="0" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column rounded-lg mud-background-gray kanbanSections">
                <MudToolBar Class="d-flex justify-content-between align-items-center" DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                    @foreach (var status in statuses)
                    {
                        if (status.StatusName == item.Name)
                        {
                            @if (status.WorkInProgressLimit > 0)
                            {
                                <div class="d-flex flex-column align-items-center ms-3">

                                    <div class="d-flex align-items-center">
                                        <span>
                                            <div class="d-flex flex-column">
                                                <button class="wipButton increaseButton" @onclick="()=>IncreaseWip(status.WorkInProgressLimit, status)">+</button>
                                                <button class="wipButton decreaseButton" @onclick="()=>DecreaseWip(status.WorkInProgressLimit, status)">-</button>
                                            </div>
                                        </span>
                                        <span class="wipLimitNumber">@status.WorkInProgressLimit</span>
                                        <span>
                                            @if (WipActiveShowSaveButton)
                                            {
                                                <MudButton Color="Color.Success" @onclick="()=>UpdateWip(status)">Save</MudButton>

                                            }
                                        </span>
                                    </div>

                                </div>
                            }
                        }
                    }
                </MudToolBar>
                @if (item.NewTaskOpen && SprintId == 0)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                        <MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                }
                <MudDropZone T="KanbanTaskItem" Identifier="@item.Name" AllowReorder="true" Class="mud-height-full" />

            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>

        @if (context.isSubTask == false)
        {
            <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3 taskBorder">
                <div class="d-flex justify-content-between">
                    @foreach (var task in tasks)
                    {
                        if (task.TaskId == context.ItemId)
                        {

                            <div>
                                @if (task.StartDate != null)
                                {
                                    <div><b>Start Date:</b> @task.StartDate.GetValueOrDefault().ToShortDateString()</div>
                                }
                                else
                                {
                                    <div><b>Start Date:</b></div>
                                }
                                @if (task.EndDate != null)
                                {
                                    <div><b>End Date:</b> @task.EndDate.GetValueOrDefault().ToShortDateString()</div>
                                }
                                else
                                {
                                    <div><b>End Date:</b></div>
                                }
                            </div>
                            <div class="d-flex flex-column">
                                <DateComponent Task="task" RefreshList="RefreshInfo" />
                                <DeleteTaskComponent Task="task" IdNumber="HandleDeletedId" RefreshList="RefreshTaskList"></DeleteTaskComponent>
                            </div>
                        }
                    }
                </div>
                <br />
                <div><b>Task:</b> @context.Name</div>
                @foreach (var task in tasks)
                {
                    if (task.TaskId == context.ItemId)
                    {
                        <div class="mt-3 d-flex justify-content-between align-items-center">
                            @if (@taskService.WorkInProgress(task, firstStatus, lastStatus) > 0)
                            {
                                <div class="itemAge">
                                    <span>@taskService.WorkInProgress(task,firstStatus,lastStatus)</span>
                                </div>
                            }
                            <ShowSubTasksComponent TaskId="context.ItemId" />
                        </div>
                    }
                }
            </MudPaper>


        }
    </ItemRenderer>
</MudDropContainer>


@code {
    private MudDropContainer<KanbanTaskItem> _dropContainer;

    [Parameter]
    public int SprintId { get; set; }

    [Parameter]
    public List<NoteModel> tasks { get; set; }

    public List<StatusDTO> statuses = new List<StatusDTO>();
    public StatusDTO firstStatus = new();
    public StatusDTO lastStatus = new();
    public StatusDTO secondStatus = new();

    private bool WipActiveShowSaveButton = false;

    private string WipLimitExceeded = string.Empty;

    async void RefreshInfo()
    {
        _dropContainer.Refresh();
    }

    /* Setup for board  */
    private List<KanBanSections> _sections = new List<KanBanSections>();

    private List<KanbanTaskItem> _tasks = new List<KanbanTaskItem>();
    private bool _addSectionOpen;

    //Provides a name to the columns since the status is an Id.
    public async Task<string> GetName(int? id)
    {
        var name = await statusService.GetStatusById((int)id);
        return name.StatusName;
    }
    public string ShowName(int? id)
    {
        var itemName = GetName(id).ToString();
        return itemName;
    }


    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
    {
        var statusForDropZoneToRead = info.Item.StatusName;
        statusForDropZoneToRead = info.DropzoneIdentifier;

        NoteModel taskToUpdate = tasks.FirstOrDefault(x => x.TaskId == info.Item.ItemId);
        if (taskToUpdate == null)
        {
            Console.WriteLine("No Task to Update");
        }
        else
        {
            foreach (var status in statuses)
            {
                if (statusForDropZoneToRead == status.StatusName)
                {
                    taskToUpdate.Status = status.StatusId;
                    if (taskToUpdate.Status == lastStatus.StatusId && taskToUpdate.EndDate == null)
                    {
                        taskToUpdate.EndDate = DateTime.Now;
                    }
                    if (taskToUpdate.Status == secondStatus.StatusId && taskToUpdate.StartDate == null)
                    {
                        taskToUpdate.StartDate = DateTime.Now;
                    }
                    taskService.UpdateTask(taskToUpdate);
                    info.Item.StatusName = status.StatusName;
                }
            }
        }
    }

    private bool isFirstRender = true;

    protected override async Task OnParametersSetAsync()
    {
        try
        {

            if (!isFirstRender)
            {
                _tasks.Clear();
                _dropContainer.Refresh();

                foreach (var task in tasks)
                {
                    string StatusName = string.Empty;
                    //var statusName = await statusService.GetStatusById((int)task.Status);
                    //foreach(var status in statuses)
                    //{
                    //    if(status.StatusId == task.Status)
                    //    {
                    //        StatusName = status.StatusName;
                    //    }
                    //}

                    await statusService.GetStatusById2((int)task.Status);
                    StatusName = statusService.Status.StatusName;

                    _tasks.Add(new KanbanTaskItem(task.TaskId, task.Name, StatusName, task.isSubTask, task.Assignee, task.EndDate, task.StartDate));
                }

                _dropContainer.Refresh();
            }
            else
            {
                isFirstRender = false;
            }
        } catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }

    }

    protected override async Task OnInitializedAsync()
    {

        statuses = await statusService.GetAllStatuses();
        lastStatus = await statusService.GetLastStatus();
        firstStatus = await statusService.GetFirstStatus();
        secondStatus = await statusService.GetSecondStatus();

        foreach (var status in statuses)
        {
            _sections.Add(new KanBanSections(status.StatusName, false, String.Empty));
        }

        foreach (var task in tasks)
        {
            var statusName = await statusService.GetStatusById((int)task.Status);
            _tasks.Add(new KanbanTaskItem(task.TaskId, task.Name, statusName.StatusName, task.isSubTask, task.Assignee, task.EndDate, task.StartDate));
        }

        await base.OnInitializedAsync();
    }

    public class KanBanSections
    {
        public string Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }


        public KanBanSections(string name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }

    public NoteModel newTask = new();

    public async void AddTask(KanBanSections section)
    {

        //if the task name is empty do not add task to kanban board
        if (section.NewTaskName == "")
        {
            section.NewTaskName = string.Empty;
            section.NewTaskOpen = false;
        }
        else
        {

            //set the name
            newTask.Name = section.NewTaskName;
            MatchNameOfStatusToStatusID(section);
            //save task to DB
            await taskService.AddTask(newTask);
            //Get task list
            tasks = await taskService.GetTasksInOrder();
            //reset the inputs
            section.NewTaskName = string.Empty;
            section.NewTaskOpen = false;
            //get last task in the task list. This is needed so that we have a task ID
            NoteModel newlyAdded = tasks.Last();
            _tasks.Add(new KanbanTaskItem(newlyAdded.TaskId, newlyAdded.Name, section.Name, newlyAdded.isSubTask, newlyAdded.Assignee, newlyAdded.StartDate, newlyAdded.EndDate));
            StateHasChanged();
            _dropContainer.Refresh();

            //cleat the newTask to be reused again
            newTask = new();
        }

    }

    public void MatchNameOfStatusToStatusID(KanBanSections section)
    {
        foreach (var status in statuses)
        {
            if (status.StatusName == section.Name)
            {
                newTask.Status = status.StatusId;
            }
        }
    }


    public class KanbanTaskItem
    {
        public int ItemId { get; set; }
        public string Name { get; init; }
        public string? StatusName { get; set; }
        public bool? isSubTask { get; set; }
        public int Assignee { get; set; }
        public DateTime? EndDate { get; set; }
        public DateTime? StartDate { get; set; }

        public KanbanTaskItem(int id, string name, string? statusName, bool? isSub, int assignee, DateTime? endDate, DateTime? startDate)
        {
            ItemId = id;
            Name = name;
            StatusName = statusName;
            isSubTask = isSub;
            Assignee = assignee;
            EndDate = endDate;
            StartDate = startDate;
        }
    }


    private async void IncreaseWip(int currentWip, StatusDTO status)
    {
        currentWip++;
        WipActiveShowSaveButton = true;
        status.WorkInProgressLimit = currentWip;
        //await statusService.UpdateStatus(status);
    }

    private async void DecreaseWip(int currentWip, StatusDTO status)
    {
        if (currentWip == 0)
        {
            currentWip = 0;
        }
        else
        {
            currentWip--;
            WipActiveShowSaveButton = true;
            status.WorkInProgressLimit = currentWip;
            //await statusService.UpdateStatus(status);
        }
    }

    private async void UpdateWip(StatusDTO updateStatus)
    {
        WipActiveShowSaveButton = false;
        await statusService.UpdateStatus(updateStatus);
    }



    void HandleDeletedId(int id)
    {
        KanbanTaskItem itemToDelete = _tasks.Find(x => x.ItemId == id);
        if (itemToDelete != null)
        {
            _tasks.Remove(itemToDelete);
        }
        else
        {
            Console.WriteLine("No task found which can be deleted.");
        }
    }

    public async void RefreshTaskList()
    {
        _dropContainer.Refresh();
    }
}
