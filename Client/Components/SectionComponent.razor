@inject ISectionService sectionService
@inject ITaskService taskService

<div>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="ToggleInput">Section +</MudButton>

    @if (ShowInput)
    {
        <input type="text" placeholder="Enter Section" @bind-value="newSection.SectionName" @bind-value:event="oninput" />
        <button @onclick="SaveSection">Save</button>
    }
</div>

    <MudChip Variant="Variant.Filled" OnClose="()=>DeleteSection(newSection.SectionId)" Size="Size.Small" @onclick="ToggleDropdown">@newSection.SectionName</MudChip>
    @if (Dropdown)
    {
        <label for="taskList">Add Task to @newSection.SectionName :</label>
        <select name="taskList" @bind-value="newLink.TaskId" @bind-value:event="onchange">
            @foreach (var task in tasks)
            {
                <option value="@task.TaskId">@DisplayText(task.Name, 20)</option>
            }
        </select>
        <div>@newLink.SectionId</div>
        <div>@newLink.TaskId</div>
    }

@code {
    Section newSection = new Section();
    List<NoteModel> tasks = new List<NoteModel>();
    sectionNoteModel newLink = new sectionNoteModel();
    List<Section> sections = new List<Section>();

    public bool Dropdown;

    [Parameter]
    public int sectionId { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    public bool ShowInput = false;
    public bool ShowOrHideAcceptanceCriteria = false;

    public void ToggleInput()
    {
        ShowInput = !ShowInput;
    }

    async void SaveSection()
    {
        await sectionService.CreateSection(newSection);
        sections = await sectionService.GetSections();
        ShowInput = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        newLink.SectionId = sectionId;
        tasks = await taskService.GetTasks();
        newSection.SectionId = sectionId;
        Section sectionInDb = await sectionService.GetSectionById(sectionId);
        newSection.SectionName = sectionInDb.SectionName;
        await base.OnInitializedAsync();
    }

    public void ToggleDropdown()
    {
        Dropdown = !Dropdown;
    }

    public async void AddTaskToSection(int id)
    {
        newLink.SectionId = newSection.SectionId;
        newLink.TaskId = id;


    }

    async void DeleteSection(int sectionId)
    {
        await sectionService.DeleteSection(sectionId);
        await RefreshList.InvokeAsync();
        StateHasChanged();
    }



    public string DisplayText(string str, int charallowed)
    {
        if (str.Length > charallowed)
            return str.Substring(0, charallowed) + " ....";
        return str;
    }


}
