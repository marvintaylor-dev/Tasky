@inject ITaskService taskService

@if (SubTaskIds.Length > 0)
{
    <div>
        <div>
            <span @onclick="ToggleActive" class="subTaskCounter position-relative">
                @SubTaskIds.Length
            </span>
            <div class="subtaskList @Active">
                @foreach (var subtask in subtasks)
                {
                    <div class="subtaskInfo">
                        <div class="subtaskItem">@subtask.Name</div>
                        <NewStatusComponent Task="subtask" />
                    </div>
                }
            </div>
        </div>
        
    </div>

}



@code {
    [Parameter]
    public int TaskId { get; set; }

    public List<NoteModel> tasks = new List<NoteModel>();
    public int[] SubTaskIds = new int[] { };

    public List<NoteModel> subtasks = new List<NoteModel>();

    public NoteModel task;

    bool isActive;

    string Active => isActive == true ? "" : "hide";

    void ToggleActive()
    {
        isActive = !isActive;
    }

    protected override async Task OnInitializedAsync()
    {
        task = await taskService.GetTaskById(TaskId);
        tasks = await taskService.GetSubtasks();

        foreach (var potentialSubtask in tasks)
        {
            if (potentialSubtask.isSubTask == true && potentialSubtask.LinkTo == task.TaskId)
            {
                Array.Resize(ref SubTaskIds, SubTaskIds.Length + 1);
                subtasks.Add(potentialSubtask);
            }
        }
        await base.OnInitializedAsync();
    }
}
