@inject ITaskService taskService;


<div class="reassignmentDropdownContainer">
    <MudIcon Icon="@Icons.Filled.MoveUp" Style="padding: 2px;" Size="Size.Small" Color="Color.Default" @onclick="ToggleClicked" />
    @if (IsClicked)
    {

        <div class="reassignmentDropdown" @onfocusout="UnClick">
            <div class="taskFont">Reassign to:</div>
            <select size="5" @bind-value="Task.LinkTo" @bind-value:event="onchange"  @onfocusout="UnClick">
                @foreach (var task in tasks)
                {
                    if (task.isSubTask == false)
                    {
                        <option value="@task.TaskId" class="reassignmentOptions">@DisplayText(task.Name, 20)</option>
                    }
                    else
                    {
                        <select>
                            <option>No Options</option>
                        </select>
                    }
                }
            </select>
        </div>

    }

</div>

@code {
    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    public bool IsClicked { get; set; }

    async void ToggleClicked()
    {
        IsClicked = !IsClicked;
        await OnClick.InvokeAsync(IsClicked);
    }

    void UnClick()
    {
        IsClicked = false;
    }

    List<NoteModel> tasks = new List<NoteModel>();

    protected override async void OnParametersSet()
    {
        tasks = await taskService.GetTasks();
        base.OnParametersSet();
    }

    public string DisplayText(string str , int charallowed){
            if(str.Length > charallowed)
                   return str.Substring(0,charallowed) + " ...." ;
            return str;
        }

}
