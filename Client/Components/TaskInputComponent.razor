@inject IJSRuntime JS

<div class="d-flex justify-content-left align-items-center">
    @if (IsClicked || !IsClicked && Task.TaskId == 0 && ReadClicked == false)
    {
        <textarea
            id="taskInput" 
            placeholder="Enter Task Name"
            rows="2" cols="30"
            @onfocus="ChildClicked"
           @onfocusout="ChildUnclicked"
           @onkeydown="Enter"
           @bind-value="Task.Name"
           @bind-value:event="oninput" />
    }
    else if (!IsClicked)
    {
        <div @onclick="ClickOnLoad" class="taskName">@Task.Name</div>
    }
</div>

@code {
    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public bool ReadClicked { get; set; }

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }


    public bool IsClicked { get; set; }


    async void ChildClicked()
    {
        IsClicked = true;
        await OnClick.InvokeAsync(IsClicked);
    }

    async void ChildUnclicked()
    {
        await System.Threading.Tasks.Task.Delay(200);
        IsClicked = false;
        await OnClick.InvokeAsync(IsClicked);
    }

    async void Clicked()
    {
        IsClicked = true;
    }

    async void ClickOnLoad()
    {
        ChildClicked();
        await JS.InvokeVoidAsync("FocusAsync");
    }


    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ClickSaveBtn();
            IsClicked = false;
        }
    }

    public async void EnterOnSelect(EventArgs e)
    {
        await ClickSaveBtn();
    }

    public async Task ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
