@inject ITaskService taskService

<div class="dateComponentContainer">

    <div class="dateIcon">
        <MudIcon Icon="@Icons.Filled.CalendarMonth" Size="Size.Small" Color="Color.Default" @onclick="ToggleClicked" />
    </div>
    <div class="dateDropdown @MenuVisible">
        <div class="d-flex flex-row">
            <div>
                <div class="dateLabel start">Start Date</div>
                <input class="dateInput" type="date" placeholder="Start Date" @bind-value="Task.StartDate" @bind-value:event="onchange" />
            </div>
            <div>
                <div class="dateLabel end">End Date</div>
                <input class="dateInput" type="date" placeholder="End Date" @bind-value="Task.EndDate" @bind-value:event="onchange" />
            </div>
        </div>
        <div class="dateSaveBtn" @onclick="SaveDate">
            <EditSaveComponent Task="Task" OnClick="CloseDropdown" RefreshList="RefreshDates" />
        </div>
    </div>

</div>


@code {
    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback<bool> RefreshList { get; set; }

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    public bool IsClicked { get; set; }

    public bool showMenu = false;

    public string MenuVisible => showMenu ? "show" : null;

    async void ChildClicked()
    {
        await OnClick.InvokeAsync(true);
    }

    async void ToggleClicked()
    {
        IsClicked = !IsClicked;
        showMenu = !showMenu;
    }

    async void SaveDate()
    {
        await taskService.UpdateTask(Task);
        RefreshDates();
        CloseDropdown();
    }

    async void RefreshDates()
    {
        await RefreshList.InvokeAsync(true);
    }

    void CloseDropdown()
    {
        showMenu = false;
    }

}
