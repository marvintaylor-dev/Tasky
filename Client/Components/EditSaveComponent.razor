
@inject IJSRuntime JS
@inject IMemberService memberService;
@inject ITaskService taskService;


<div class="d-flex align-items-center justify-content-center">

    @if (Task.TaskId > 0)
    {
        <MudIconButton Color="EditColorIs" id="editButton" Icon="@Icons.Material.Filled.Create" Size="Size.Small" @onclick="(()=> EditTask(Task))" />
        
    }
    else
    {
        <MudIconButton Color="SaveColorIs" id="saveButton" Icon="@Icons.Material.Filled.Save" Size="Size.Small" @onclick="(() => SaveTask(Task))" />
    }
</div>



@code {


    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public EventCallback RefreshList { get; set; }

    [Parameter]
    public MudBlazor.Color EditColorIs { get; set; } = Color.Info;

    [Parameter]
    public MudBlazor.Color SaveColorIs { get; set; } = Color.Tertiary;

    public bool IsClicked { get; set; }

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    async Task ChildClicked()
    {
        IsClicked = false;
        await OnClick.InvokeAsync(IsClicked);
    }

    async void SaveTask(NoteModel task)
    {
        await taskService.AddTask(task);
        await ChildClicked();
        await RefreshList.InvokeAsync();
    }

    async void EditTask(NoteModel task)
    {
        await taskService.UpdateTask(task);
        await ChildClicked();
        await RefreshList.InvokeAsync();
    }





}
