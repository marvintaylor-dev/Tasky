@inject IJSRuntime JS

<div class="taskInput d-flex justify-content-left align-items-center @SubtaskCss">
        <textarea id="taskInput"
                  placeholder="Enter Task Name"
                  rows="1" cols="30"
              @onkeydown="Enter"
              @bind-value="Task.Name"
              @bind-value:event="oninput" />
</div>

@code {


    [Parameter]
    public NoteModel Task { get; set; }

    //[Parameter]
    //public bool ReadClicked { get; set; }

    //[Parameter]
    //public EventCallback<bool> Selected { get; set; }

    //bool IsClicked;

    [Parameter]
    public EventCallback<bool> OnClick { get; set; }

    [Parameter]
    public bool OnFocusOut { get; set; }

    public string SubtaskCss => Task.isSubTask == true ? "subtaskIndent" : "";

    

    public bool ChildClicked()
    {
        return true;
    }

    //public async void ChildUnclicked()
    //{
    //    await System.Threading.Tasks.Task.Delay(200);
    //    IsClicked = false;
    //    await OnClick.InvokeAsync(IsClicked);
    //}

    //async void Clicked()
    //{
    //    IsClicked = true;
    //}

    //async void ClickOnLoad()
    //{
    //    ChildClicked();
    //    await JS.InvokeVoidAsync("FocusAsync");
    //}


    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ClickSaveBtn();
            //IsClicked = false;
        }
    }

    //public async void EnterOnSelect(EventArgs e)
    //{
    //    await ClickSaveBtn();
    //}

    public async Task ClickSaveBtn()
    {
        try
        {
            await JS.InvokeVoidAsync("saveOnEnter");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
