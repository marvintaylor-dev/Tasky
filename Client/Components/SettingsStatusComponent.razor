@using Tasky.Shared.DTOs;
@inject IStatusService statusService;

<MudButton Color="Color.Secondary" @onclick="ToggleStatusSettings">Status Settings</MudButton>

@if (ShowStatus)
{
    <ReusableTableComponent Items="statuses">
        <Header>
            <th>Order of Statuses</th>
            <th>Status Name</th>
            <th>Definition of Finished</th>
            <th>Work In Progress Limit</th>
            <th>Remove</th>
        </Header>
        <Row>
            @if (context.IsEditing)
            {
                <td><input type="number" @bind-value="@context.StatusOrder" /></td>
                <td><input type="text" @bind-value="@context.StatusName" /></td>
                <td><input type="text" @bind-value="@context.StatusDefinitionOfFinished" /></td>
                <td><input type="text" @bind-value="@context.WorkInProgressLimit" /></td>
                <td @onclick="() => SaveStatus(context)">Save</td>

            }
            else
            {
                <td @onclick="() => EditStatus(context)">@context.StatusOrder</td>
                <td @onclick="() => EditStatus(context)">@context.StatusName</td>
                <td @onclick="() => EditStatus(context)">@context.StatusDefinitionOfFinished</td>
                <td @onclick="() => EditStatus(context)">@context.WorkInProgressLimit</td>
                <td style="color: red" @onclick="() => DeleteStatus(context.StatusId)">&#10006;</td>
            }
        </Row>
    </ReusableTableComponent>

    <h4 class="mt-4">Add a New Status</h4>
    <EditForm Model="@newStatus" OnValidSubmit="@AddStatus">
        <DataAnnotationsValidator />

        <div class="d-flex gap-3 align-items-center">
            <div class="form-group">
                <label for="status-order">Status Order</label>
                <InputNumber id="status-order" class="form-control" @bind-Value="newStatus.StatusOrder" />
            </div>
            <div class="form-group">
                <label for="status-name">Status Name</label>
                <InputText id="status-name" class="form-control" @bind-Value="newStatus.StatusName" />
            </div>
            <div class="form-group">
                <label for="status-definition">Status Definition Of Finished</label>
                <InputText id="status-definition" class="form-control" @bind-Value="newStatus.StatusDefinitionOfFinished" />
            </div>
            <div class="form-group">
                <label for="wip-limit">Work In Progress Limit</label>
                <InputNumber id="wip-limit" class="form-control" @bind-Value="@newStatus.WorkInProgressLimit" />
            </div>

            <button type="submit" class="btn btn-warning">Add New Status</button>

        </div>
    </EditForm>
}


@code {
    private List<StatusDTO> statuses = new();
    private StatusDTO newStatus = new();

    private bool ShowStatus = false;
    void ToggleStatusSettings()
    {
        ShowStatus = !ShowStatus;
    }

    protected override async Task OnInitializedAsync()
    {
        statuses = await statusService.GetAllStatuses();
        await base.OnInitializedAsync();
    }

    async void DeleteStatus(int id)
    {
        await statusService.DeleteStatus(id);
        statuses = await statusService.GetAllStatuses();
        StateHasChanged();
    }

    async void AddStatus()
    {
        await statusService.AddStatus(newStatus);
        statuses = await statusService.GetAllStatuses();
        newStatus = new StatusDTO();
        StateHasChanged();
    }

    async void EditStatus(StatusDTO status)
    {
        status.IsEditing = true;
    }

    async void SaveStatus(StatusDTO status)
    {
        Console.WriteLine(status.StatusOrder);
        status.IsEditing = false;
        await statusService.UpdateStatus(status);
        StateHasChanged();
    }

}
