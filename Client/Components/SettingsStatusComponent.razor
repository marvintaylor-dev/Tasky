@using Tasky.Shared.DTOs;
@inject IStatusService statusService;

<style>
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 3rem;
    }

    th, td {
        text-align: left;
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    td button {
        border: none;
        background-color: transparent;
        color: red;
        cursor: pointer;
        font-size: 1.5rem;
    }

        td button:hover {
            color: #ff6666;
        }

    input[type="text"], input[type="number"] {
        padding: 6px 10px;
        border-radius: 4px;
        border: 1px solid #ccc;
        box-sizing: border-box;
        font-size: 1rem;
    }

    button[type="submit"] {
        background-color: #ffc107;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
    }

        button[type="submit"]:hover {
            background-color: #ffcd38;
        }

    .form-group {
        margin-bottom: 1rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
    }

    .validation-summary {
        margin-bottom: 1rem;
    }
</style>

<MudButton Color="Color.Secondary" @onclick="ToggleStatusSettings">Status Settings</MudButton>

@if (ShowStatus)
{
    <table>
        <thead>
            <tr>
                <th>Order of Statuses</th>
                <th>Status Name</th>
                <th>Definition of Finished</th>
                <th>Work In Progress Limit</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var status in statuses)
            {
                <tr>
                    @if (status.IsEditing)
                    {
                        <td><input type="number" @bind-value="@status.StatusOrder" /></td>
                        <td><input type="text" @bind-value="@status.StatusName" /></td>
                        <td><input type="text" @bind-value="@status.StatusDefinitionOfFinished" /></td>
                        <td><input type="text" @bind-value="@status.WorkInProgressLimit" /></td>
                        <td @onclick="() => SaveStatus(status)">Save</td>

                    }
                    else
                    {
                        <td @onclick="() => EditStatus(status)">@status.StatusOrder</td>
                        <td @onclick="() => EditStatus(status)">@status.StatusName</td>
                        <td @onclick="() => EditStatus(status)">@status.StatusDefinitionOfFinished</td>
                        <td @onclick="() => EditStatus(status)">@status.WorkInProgressLimit</td>
                        <td @onclick="() => DeleteStatus(status.StatusId)">&#10006;</td>

                    }
                </tr>
            }
        </tbody>
    </table>

    <h4 class="mt-4">Add a New Status</h4>
    <EditForm Model="@newStatus" OnValidSubmit="@AddStatus">
        <DataAnnotationsValidator />

        <div class="d-flex gap-3 align-items-center">
            <div class="form-group">
                <label for="status-order">Status Order</label>
                <InputNumber id="status-order" class="form-control" @bind-Value="newStatus.StatusOrder" />
            </div>
            <div class="form-group">
                <label for="status-name">Status Name</label>
                <InputText id="status-name" class="form-control" @bind-Value="newStatus.StatusName" />
            </div>
            <div class="form-group">
                <label for="status-definition">Status Definition Of Finished</label>
                <InputText id="status-definition" class="form-control" @bind-Value="newStatus.StatusDefinitionOfFinished" />
            </div>
            <div class="form-group">
                <label for="wip-limit">Work In Progress Limit</label>
                <InputNumber id="wip-limit" class="form-control" @bind-Value="@newStatus.WorkInProgressLimit" />
            </div>

            <button type="submit" class="btn btn-warning">Add New Status</button>

        </div>
    </EditForm>
}


@code {
    private List<StatusDTO> statuses = new();
    private StatusDTO newStatus = new();

    private bool ShowStatus = false;
    void ToggleStatusSettings()
    {
        ShowStatus = !ShowStatus;
    }

    protected override async Task OnInitializedAsync()
    {
        statuses = await statusService.GetAllStatuses();
        await base.OnInitializedAsync();
    }

    async void DeleteStatus(int id)
    {
        await statusService.DeleteStatus(id);
        statuses = await statusService.GetAllStatuses();
        StateHasChanged();
    }

    async void AddStatus()
    {
        await statusService.AddStatus(newStatus);
        statuses = await statusService.GetAllStatuses();
        newStatus = new StatusDTO();
        StateHasChanged();
    }

    async void EditStatus(StatusDTO status)
    {
        status.IsEditing = true;
    }

    async void SaveStatus(StatusDTO status)
    {
        Console.WriteLine(status.StatusOrder);
        status.IsEditing = false;
        await statusService.UpdateStatus(status);
        StateHasChanged();
    }

}
