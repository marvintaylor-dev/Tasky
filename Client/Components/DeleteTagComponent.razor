@using Tasky.Client.Services.TagService
@using Tasky.Client.Services.TaskService

@inject ITagService tagService;
@inject ITaskService taskService;


@if (Tag.TagId > 0)
{
    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="(()=> DeleteTag(Tag.TagId))" />
}
else
{
     <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="(()=> DeleteUnsavedTag())" />
}

@code {

    [Parameter]
    public NoteModel Task { get; set; }

    [Parameter]
    public Tag Tag { get; set; }

    [Parameter]
    public EventCallback RefreshTags { get; set; }

    public List<Tag> tags = new List<Tag>();
    public List<NoteModel> tasks = new List<NoteModel>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetTasks();
        tags = await tagService.GetAllTags();
        await base.OnInitializedAsync();
    }

    async void DeleteTag(int id)
    {
        if(Task.Tag == id)
        {
            Task.Tag = null;
        }
        foreach(NoteModel task in tasks)
        {
            if(task.Tag == id)
            {
                task.Tag = null;
                await taskService.UpdateTask(task);
            }
        }

        await tagService.DeleteTag(id);
        await RefreshTags.InvokeAsync();
    }

    async void DeleteUnsavedTag()
    {
        tags.Remove(Tag);
        await RefreshTags.InvokeAsync();
    }
}
